<html>

<head><tml:htmlhead/></head>

<body>
	<PRE>
	Testing new navigator functionality (#00003488) 
	</PRE>
	
	<hr>
	
	<tml:script>
		function findCookie(name) {
			for each (c in request.getCookies()) {
				if (c.name==name) return c.value;
			}
			return null;
		}
		
		function countDocs(it) {
			var count=0;
			for (doc in Iterator(it)) {
				count++;
			}
			return count;
		}
		
		function collectKeys(it) {
			var keys = [];
			for (doc in Iterator(it)) {
				keys.push(doc.STRUCTKEY);
			}
			return keys;
		}
		
		var clickStep = parseInt(findCookie("clickStep"));
		var cat = findCookie("testId");
		
		try {
			var areas = WGA.nav(context("db:ig<de>/docid:GBES-5DPAFQ.de.0")).areas();
			assertEquals("TMLScript Nav Object: Areas", cat, countDocs(areas), 8);
			
			var children = WGA.nav(context("db:ig<de>/docid:GBES-5DPAFQ.de.0")).children();
			assertEquals("TMLScript Nav Object: Children", cat, countDocs(children), 5);
			
			var langs = WGA.nav(context("db:ig<de>/name:home")).languages();
			assertEquals("TMLScript Nav Object: Languages", cat, countDocs(langs), 1);

			var allLangs = WGA.nav(context("db:ig<de>/name:home")).languages({alllanguages:true});
			assertEquals("TMLScript Nav Object: All Languages", cat, countDocs(allLangs), 2);
			
			var parents = WGA.nav(context("db:ig/docid:GBES-5DPATK.de.0")).navigate("parents");
			assertEquals("TMLScript Nav Object: Parents", cat, countDocs(parents), 5);
			
			var path = WGA.nav(context("db:ig<de>/docid:GBES-5DPATK.de.0")).path();
			assertEquals("TMLScript Nav Object: Path", cat, countDocs(path), 3);
			
			var siblings = WGA.nav(context("db:ig/area:home")).siblings();
			assertEquals("TMLScript Nav Object: Siblings", cat, countDocs(siblings), 12);
			
			var sitemap = WGA.nav(context("db:ig/area:home")).sitemap();
			assertEquals("TMLScript Nav Object: Sitemap", cat, countDocs(sitemap), 124);

			var sitemapMaxLevel = WGA.nav(context("db:ig/area:home")).sitemap({maxlevel:2});
			assertEquals("TMLScript Nav Object: Sitemap Max Level", cat, countDocs(sitemapMaxLevel), 50);
			
			var sitemapRoleNone = WGA.nav(context("db:ig/area:home")).sitemap({role:'none'});
			assertEquals("TMLScript Nav Object: Sitemap Role None", cat, countDocs(sitemapRoleNone), 157);
			
			var sitemapAllAreas = WGA.nav(context("db:ig")).sitemap({allareas:true});
			assertEquals("TMLScript Nav Object: Sitemap All Areas", cat, countDocs(sitemapAllAreas), 183);
			assertEquals("TMLScript Nav Object: Sitemap All Areas Size", cat, sitemapAllAreas.size, 183);
			
			var relationGroupTargets = WGA.nav(context("db:testhdbmodel/name:customers.custa")).relationGroupTargets("relatedcustomers");
			assertEqualLists("TMLScript Nav Object: Relation group targets", cat, collectKeys(relationGroupTargets), ["ff80818139672b5b0139673ba7a90166" , "ff80818139672b5b0139673bc6f70174" , "ff80818139672b5b0139673c24ca019e"]);
			
			var relationSources = WGA.nav(context("db:testhdbmodel/name:projects.project1")).sourcesOfIncomingRelations("parent-project");
			assertEqualLists("TMLScript Nav Object: Sources of incoming relations", cat, collectKeys(relationSources), ["ff80818139672b5b0139673c82fc01bb" , "ff80818139672b5b0139673c833801c8" , "ff80818139672b5b0139673c837001d5" , "ff80818139672b5b0139673c83b401e2" , "ff80818139672b5b0139673c83f801ef" , "ff80818139672b5b0139673c843d01fe" , "ff80818139672b5b0139673c8487020d" , "ff8081814830122f0148302c212a3233" , "ff8081814830122f0148302c4d7a3244" , "ff8081814830122f0148302c83343255" , "ff8081814830122f0148302cbbfd3266" , "ff8081814830122f0148302cf09e3277"]);
			
			var relationGroupSources = WGA.nav(context("db:testhdbmodel/name:customers.custf")).sourcesOfIncomingRelationGroups("relatedcustomers");
			assertEqualLists("TMLScript Nav Object: Sources of incoming relation groups", cat, collectKeys(relationGroupSources), ["ff80818139672b5b01396739b6100120"]);		
			
			var versions = WGA.nav(context("db:ig/name:home<de>")).versions();
			assertEquals("TMLScript Nav Object: Versions", cat, countDocs(versions), 16);
			
			var skippedSiblings = WGA.nav(context("db:ig/area:home")).siblings().skip(5);
			assertEquals("TMLScript Nav Object: Skip", cat, countDocs(skippedSiblings), 7);
			
			var sitemapFilter = WGA.nav(context("db:ig/area:home")).sitemap({role:'none'}).filter(function(cx) cx.CONTENTTYPE=='standard');
			assertEquals("TMLScript Nav Object: Filter", cat, countDocs(sitemapFilter), 93);
			//assertEquals("TMLScript Nav Object: NavResult string representation", cat, sitemapFilter.toString(), ""); dynamic string bc. of TMLScript filter
			assertEquals("TMLScript Nav Object: First result", cat, sitemapFilter.firstResult, context("db:ig/docid:owee-6wakb2.de.1"));
			assertEquals("TMLScript Nav Object: Single Value", cat, sitemapFilter.getSingleValue("_Headline"), "QueryVisibilityEnforcement");
			
			
			var collectionPage1 = sitemapFilter.getPage(1, 10);
			assertEquals("TMLScript Nav Object: getPage", cat, countDocs(collectionPage1), 10);
    		assertEquals("TMLScript Nav Object: CollectionPage.endReached", cat, collectionPage1.endReached, false);
    		assertEquals("TMLScript Nav Object: CollectionPage.startIndex", cat, collectionPage1.startIndex, 3);
    		assertEquals("TMLScript Nav Object: CollectionPage.endIndex", cat, collectionPage1.endIndex, 12);

			var collectionPage2 = siblings.getPage(10, 10);
			assertEquals("TMLScript Nav Object: getPage at end", cat, countDocs(collectionPage2), 4);
			assertEquals("TMLScript Nav Object: CollectionPage.endReached at end", cat, collectionPage2.endReached, true);
    		assertEquals("TMLScript Nav Object: CollectionPage.startIndex at end", cat, collectionPage2.startIndex, 10);
    		assertEquals("TMLScript Nav Object: CollectionPage.endIndex at end", cat, collectionPage2.endIndex, 13);
			
		}
		catch (e) {
			logException(e);
			assertTrue("Exception running tests", cat, "false");
		}
	</tml:script>
	
	<tml:warnings/>
</body>
</html>