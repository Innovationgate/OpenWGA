<html>
<head><tml:htmlhead/></head>
<body>

	<PRE>
	Tests correct deregistration of portlets. The portlet itself and its child portlet must be deregistered.
	</PRE>
	
	<hr>

<tml:action id="clearRegistration">
try {
	log.info("Clear portlet registration");
	portlet.root.unregisterChildPortlets();
}
catch (e) {
	logException(e);
	errmsg = e.message;
}
</tml:action>

<tml:action id="deregisterPortlet">
try {
	log.info("Deregistering portlet");
	portlet.unregisterPortletForName("theportlet");
}
catch (e) {
	logException(e);
	errmsg = e.message;
}
</tml:action>

Profil-ID: <tml:meta type="profile" name="name"/>

<tml:action id="registerPortlet">
try {
	log.info("Registering portlet");
	portlet.registerPortletForName("theportlet", "v5_0_m3:portlets:unregister_inner");
	portlet.save();
}
catch (e) {
	logException(e);
	errmsg = e.message;
}
</tml:action>


<tml:case condition="seq == 2">
	<tml:include type="portlet" name="theportlet"/>
</tml:case>

<tml:button id="register" clickaction="registerPortlet">Register Portlet</tml:button>
<tml:button id="deregister" clickaction="deregisterPortlet">Deregister Portlet</tml:button>
<tml:button id="clear" clickaction="clearRegistration">Clear portlet registration</tml:button>

<tml:script>
	var cat = "WebTML:Portlets";
	
	// Prepare sequence variable to be able to determine the request sequence number
	if (isdefined("seq")) {
		seq++;
	}
	else {
		setSessionVar("seq", 1);
	}
	
	try {
	
		// Initial load
		if (seq == 1) {
			log.info("Test 'unregister' running under profile id:"  + profile.NAME);
		}	

		// Calling "clear"		
		else if (seq == 2) {
			assertTrue("Portlet theportlet not registered at beginning", cat, portlet.getPortletForName("theportlet") == null);
			assertTrue("No errors on operation 'clear'", cat, "!isDefined('errmsg')");
		}	
		
		// Calling "register"
		else if (seq == 3) {
			assertTrue("No errors on operation 'register'", cat, "!isDefined('errmsg')");
			var thePortlet = portlet.getPortletForName("theportlet");
			assertTrue("Portlet was registered", cat, thePortlet != null);
			var childPortlet = thePortlet.getPortletForName("ancestor");
			assertTrue("Child Portlet was registered", cat, childPortlet != null);
			
			setSessionVar("theportletKey", thePortlet.portletkey);
			setSessionVar("ancestorKey", childPortlet.portletkey);
			
			assertTrue("Portlet also retrievable via key", cat, portlet.getPortlet(theportletKey) != null);
			assertTrue("Child portlet also retrievable via key", cat, portlet.getPortlet(ancestorKey) != null);
			
		}

		// Calling "deregister"
		else if (seq == 4) {
				assertTrue("No errors on operation 'deregister'", cat, "!isDefined('errmsg')");
				assertTrue("Portlet was deregistered", cat, portlet.getPortlet(theportletKey) == null);
				assertTrue("Child portlet was deregistered", cat, portlet.getPortlet(ancestorKey) == null);
		}

		
	}
	catch (e) {
		logException(e);
		assertTrue("Exception running tests", cat, "false");
	}
</tml:script>

<tml:warnings/>

</body>
</html>