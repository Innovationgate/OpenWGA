<html>

<head><tml:htmlhead/></head>

<body>
	<PRE>
	Test "original user" metas (F00005E1A)
	</PRE>
	
	<hr>
	
	<tml:script>
			setSessionVar("executeAssertions", function(con, prefix) {
				cat  ="TMLScript:OriginalUser";
				try {
					assertEquals(prefix + "Request original_username", cat, con.meta('db', "ORIGINAL_USERNAME"), "ow");
					assertEquals(prefix + "Request original_useraccess", cat, con.meta('db', "ORIGINAL_USERACCESS"), 90);
					assertEqualLists(prefix + "Request original_useraliases", cat, con.metaList("db", "ORIGINAL_USERALIASES"), createList(["ow", "oweise", "Oliver Weise"]));
					
					if (con.db().getDbReference() == "test1") {
						assertEquals(prefix + "Request original_userroles", cat, con.metaList("db", "ORIGINAL_USERROLES"), createList(["master"]));
					}
					
					assertEqualLists(prefix + "Request original_usergroups", cat, con.metaList("db", "ORIGINAL_USERGROUPS"), createList(["Admins", "WrongCaseGroup", "All"]));
					assertEquals(prefix + "Request original_useremail", cat, con.meta('db', "ORIGINAL_USEREMAIL"), "cvsCheckout@innovationgate.de");
					assertEquals(prefix + "Request original_usermaymovestructs", cat, con.meta('db', "ORIGINAL_USERMAYMOVESTRUCTS"), true);
					assertEquals(prefix + "Request original_usermaydeletedocs", cat, con.meta('db', "ORIGINAL_USERMAYDELETEDOCS"), true);
				}
				catch (e) {
					assertTrue("Exception running assertions", cat, "false");
				}
			});
	</tml:script>
	
	<tml:action master="true" id="MasterAction">
		try {
			assertEquals(tmlparam1 + "We normally are master user now", cat, meta('db', "USERNAME"),  db().MASTER_USERNAME);
			executeAssertions(this, tmlparam1);
			assertEquals(tmlparam1 + "Original_username from a different DB is null", cat, context("db:designslave", false).meta('db', "ORIGINAL_USERNAME"), null); 
		}
		catch (e) {
			assertTrue("Master action threw exception", "TMLScript:OriginalUser", "false");
			logException(e); 
		}
	</tml:action>
	
		<tml:action master="true" id="MasterActionDifferentDB">
		try {
			assertEquals(tmlparam1 + "We normally are master user now", cat, meta('db', "USERNAME"),  db().MASTER_USERNAME);
			var con = context("db:test1");
			executeAssertions(con, tmlparam1);
			assertEquals(tmlparam1 + "Original_username from a different DB is null", cat, context("db:designslave", false).meta('db', "ORIGINAL_USERNAME"), null); 
		}
		catch (e) {
			assertTrue("Master action threw exception", "TMLScript:OriginalUser", "false");
			logException(e); 
		}
	</tml:action>
	
	<tml:action id="MasterActionHDB" master="true">
		try {
			if (seq == 1) {
				// Test with HDB listener script
				var storage = hdb().getOrCreateStorage("listenerOrigUser");
				hdb().setListener(storage, "listenerOrigUser");
				var newCon = hdb().createContent(storage);
				newCon.save();
			}
		}
		catch (e) {
			logException(e);
			assertTrue("Exception running tests", cat, "false");
		}
	</tml:action>
	
	<tml:button id="MasterActionButton" param1="Directly called master action: " clickaction="MasterAction">Master Action</tml:button>
	
	<tml:script>
		// Prepare sequence variable to be able to determine the request sequence number
		if (isdefined("seq")) {
			seq++;
		}
		else {
			setSessionVar("seq", 1);
		}
		
		try {
		
			if (seq == 1) {
				assertEquals("Root context: We are logged in user now", cat, meta('db', "USERNAME"),  "ow");
				executeAssertions(this, "Root context: ");
			
				// Test with master action called from normal script
				callAction("MasterAction", "Master Action from normal Action: ");
				
				// Test with master action, context on a different database, called from normal script
				callAction(context("db:test2"), "MasterActionDifferentDB", "Master Action on special context db: ");
				
				// Test with HDB listener, triggered from master action
				callAction(context("db:testhdb"), "MasterActionHDB");
				
				// Test with master function
				runMasterFunction(
					function() {
						assertEquals("Master function: We normally are master user now", cat, meta('db', "USERNAME"),  db().MASTER_USERNAME);
						executeAssertions(this, "Master function: ");
						assertEquals("Master function: Original_username from a different DB is null", cat, context("db:test2").meta('db', "ORIGINAL_USERNAME"), null);
					}
				);
			}
		}
		catch (e) {
			logException(e);
			assertTrue("Exception running tests", cat, "false");
		}
	</tml:script>
	
	
	
	<tml:warnings/>
</body>
</html>
