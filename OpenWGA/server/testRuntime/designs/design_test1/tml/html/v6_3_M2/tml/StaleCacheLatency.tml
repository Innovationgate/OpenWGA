<tml:action id="clearCache">
	WGA.Core.getWebTMLCache().clear();
</tml:action>

<html>

<head><tml:htmlhead/></head>

<body>
	<PRE>
	Ensures that WebTML cache with latency is able to serve stale data while another request fills the cache (#00002243)
	</PRE>
	
	<hr>
	
	<a id="click1" href="<tml:url action="clearCache"/>">Clear cache</a>
	<a id="click2" href="<tml:url action="$refresh"/>">Reload</a>
	<a id="click3" href="<tml:url action="$refresh"/>">Reload</a>
	<a id="click4" href="<tml:url action="$refresh"/>">Reload</a>
	
	<tml:script>
		function findCookie(name) {
			for each (c in request.getCookies()) {
				if (c.name==name) return c.value;
			}
			return 0;
		}
		
		var asyncTestId = request.getParameter("asyncRequestTestId")
		if (asyncTestId != null) {
			asyncRequest = true; 
			clickStep = 999;
			cat = asyncTestId;
		}
		else {
			clickStep = parseInt(findCookie("clickStep"));
			cat = findCookie("testId");
		}
		
	</tml:script>

	<tml:range var="cacheContent" id="staleCache" cachekey="'any'" cachelatency="1" trim="true">
		Cache content <tml:item name="clickStep"/>
		<tml:script>
			if (asyncRequest == true) {
				java.lang.Thread.sleep(1000 * 60);
			}
		</tml:script>
	</tml:range>

	<tml:script>
		
		
		try {
			if (clickStep == 1) {
				assertEquals("Cache is cleared on step 1", cat, taginfo("staleCache", "cacheused"), false);
				assertEquals("Cache content on step " + clickStep, cat, cacheContent, "Cache content 1");
			}
			
			if (clickStep == 2) {
				assertEquals("Cache is used on step 2", cat, taginfo("staleCache", "cacheused"), true);
				assertEquals("Cache content on step " + clickStep, cat, cacheContent, "Cache content 1");
			}
			
			if (clickStep == 3) {
				assertEquals("Cache was served on step 3", cat, taginfo("staleCache", "cacheused"), true);
				assertEquals("Cache was served stale on step 3", cat, taginfo("staleCache", "cachestale"), true);
				assertEquals("Cache content on step " + clickStep, cat, cacheContent, "Cache content 1");
			}
			
			if (clickStep == 4) {
				assertEquals("Cache content on step " + clickStep, cat, cacheContent, "Cache content 999");
			}
			
			if (asyncRequest == true) {
				assertEquals("Cache was updated on asynchronous second request", cat, taginfo("staleCache", "cacheused"), false);
				assertEquals("Cache content on step " + clickStep, cat, cacheContent, "Cache content 999");
			}
		}
		catch (e) {
			logException(e);
			assertTrue("Exception running tests", cat, "false");
		}
	</tml:script>
	
	<tml:warnings/>
</body>
</html>