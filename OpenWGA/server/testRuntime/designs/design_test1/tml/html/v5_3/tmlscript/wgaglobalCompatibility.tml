<html>

<head><tml:htmlhead/></head>

<body>
	<PRE>
	Tests availability of old compatibility methods of WGA object methods
	</PRE>
	
	<hr>
	
	<tml:script>
		var cat = "TMLScript:WGAGlobal:Compatibility";
		
		
		try {

			var parsedDate = parseDate("17.01.2011 15:00", "dd.MM.yyyy HH:mm");
			assertEquals("parseDate()", cat, parsedDate.getTime(), 1295272800000);
			
			createdDate1 = createDate();
			assertTrue("createDate()", cat, "createdDate1 instanceof java.util.Date");
			
			createdDate2 = createDate(false);
			assertTrue("createDate(false)", cat, "createdDate1 instanceof java.util.Date");
			
			theFormInfo = createFormInfo("theform");
			assertTrue("createFormInfo(id)", cat, "theFormInfo instanceof Packages.de.innovationgate.wgpublisher.webtml.form.TMLFormInfo");
			
			theForm = createForm(theFormInfo);
			assertTrue("createForm(formInfo)", cat, "theForm instanceof Packages.de.innovationgate.wgpublisher.webtml.form.TMLForm");
			
			/* Can't test because we have no scaler in unittest environment
			theScaler = WGA.createImageScaler(db().getFileContainer("boerse").getFileData("dax.gif"));
			assertTrue("WGA.createImageScaler", cat, "theScaler instanceof Packages.de.innovationgate.utils.ImageScaler"); */
			
			theList1 = createList();
			assertTrue("createList()", cat, "theList1.size() == 0");
			
			theList2 = createList(["a", "b", "c"]);
			assertTrue("WGA.createList(array)", cat, "theList2.size() == 3");
			
			theList3 = createList("a,b,c", ",");
			assertTrue("WGA.createList(string, delim)", cat, "theList3.size() == 3");
			
			theLT = createLookupTable();
			assertTrue("createLookupTable()", cat, "theLT.size() == 0");
			
			theMail1 = createMail();
			assertTrue("createMail()", cat, "theMail1 instanceof Packages.de.innovationgate.webgate.api.mail.WGMail");

			theMail2 = createMail("smtp.innovationgate.com", "ow", "Heidi"); // No those creds do not really work
			assertTrue("createMail(host, user, pwd)", cat, "theMail2 instanceof Packages.de.innovationgate.webgate.api.mail.WGMail");
			
			theNumber = WGA.parseNumber("1,234", "0.000")
			assertEquals("WGA.parseNumber(str, format)", cat, theNumber, 1.234);
		
			//thePlugin = WGA.plugin("de.innovationgate.contentmanager");
			assertEquals("plugindb(name)", cat, plugindb("de.innovationgate.contentmanager"), db("plugin-contentmanager"));
			assertTrue("pluginid(name)", cat, "pluginid(plugindb('de.innovationgate.contentmanager')) != null");
			assertEquals("db(key)", cat, db("test2"), wgacore.getContentdbs().get("test2"));
			assertEquals("hdb(key)", cat, hdb("testhdb"), Packages.de.innovationgate.webgate.api.WGHierarchicalDatabase.getOrCreateInstance(wgacore.getContentdbs().get("testhdb")));
			assertTrue("wgacore", cat, "wgacore instanceof Packages.de.innovationgate.wgpublisher.WGACore");
			
			encodedStr = encode("html", "<br>");
			assertEquals("encode(enc, str)", cat, encodedStr, "&#60;br&#62;");
			
			actionRV = callAction("::anaction");
			assertEquals("callAction(id)", cat, actionRV, "Yes!");
			
			theObject = createObject("::anobject");
			assertEquals("createObject(id)", cat, theObject.doIt(), "Still:yes!");
			
			var someList = createList(["a", "b", "a", "c"]);
			noDoublets = deleteDoublets(someList);
			assertTrue("deleteDoublets(list)", cat, "noDoublets.size() == 3");
			
			var serialized = serializeObject(someList);
			var deserialized = deserializeObject(serialized);
			assertEquals("serialize/deserializeObject()", cat, deserialized, someList);
			
			var formattedDate = format(parsedDate, "dd.MM.yyyy");
			assertEquals("format(format, str)", cat, formattedDate, "17.01.2011");
			
			var aMap = createLookupTable();
			aMap.put("a", 1);
			aMap.put(2, "b");
			assertEquals("getLookupKeys(map)", cat, getLookupKeys(aMap), new java.util.ArrayList(aMap.keySet()));
			
			var trimmed = javaObject(" trimmed ").trim();
			assertEquals("javaObject(obj)", cat, trimmed, "trimmed");
			
			var objdef = loadObjectDefinition("::anobject");
			var anotherObject = createObject(objdef);
			assertEquals("loadObjectDefinition(id)", cat, anotherObject.doIt(), "Still:yes!");
			
			// WGA.sortList() tested in dedicated Unittest
		
			var someFun = function() { return "And yes again!" };
			var syncedFun = synchronizedFunction(someFun);
			assertEquals("synchronizedFunction(fun)", cat, syncedFun(), "And yes again!");
			
			var someXml = "<doc><elem>Hallo!</elem></doc>";
			doc2 = parseXML(someXml);
			assertEquals("parseXML(xml)", cat, doc2.getRootElement().getName(), "doc");
			
			xpath1 = xpath(someXml, "/doc/elem/text()");
			assertEquals("xpath(xml, path)", cat, xpath1, "Hallo!");
			
			xpath2 = xpathList(someXml, "/doc/elem/text()");
			assertEquals("xpathList(xml, path)", cat, xpath2, createList(["Hallo!"]));
			
			var gimmeMaster = function(p1) {  return meta("db", "username") + ":" + p1 };
			var masterName1 = runMasterFunction(gimmeMaster, "Param!");
			assertEquals("runMasterFunction(fun, param)", cat, masterName1, "Master Session:Param!"); 
			
			var masterName2 = theObject.doOldMaster("Objectparam!");
			assertEquals("runMasterMethod(fun, param)", cat, masterName2, "Master Session:Objectparam!");
			
			var test3obj = createObject("test3/v5_3:tmlscript:anobject");
			assertEquals("localLabel()", cat, test3obj.theOldLabel(), "Das Label von test3");
			assertEquals("localDb()", cat, test3obj.theDB(), WGA.db("test3"));
			
			registerGlobal("ThatOldUnittestObject", anotherObject);
			assertEquals("registerGlobal(name, obj)", cat, ThatOldUnittestObject.doIt(), "Still:yes!");
			
			registerGlobal("ThatOtherOldUnittestObject", anotherObject, designdb());
			assertEquals("registerGlobal(name, obj, db)", cat, ThatOtherOldUnittestObject.doIt(), "Still:yes!");
			
			var html1 = loadHTML(meta("request", "absolutewgaurl") + "/test1/file/html/test.html");
			assertEquals("loadHTML(url)", cat, html1.selectSingleNode("/HTML/BODY").getTextTrim(), "Hallo!");
			
			luceneRS1 = luceneSearch("Webgate");
			assertTrue("luceneSearch(phrase)", cat, "luceneRS1 instanceof Packages.de.innovationgate.webgate.api.WGResultSet");
			
			luceneRS2 = luceneSearch("Webgate", "db");
			assertTrue("luceneSarch(phrase, scope)", cat, "luceneRS2 instanceof Packages.de.innovationgate.webgate.api.WGResultSet");
			
			removeLuceneQuery();
			assertTrue("removeLuceneQuery()", cat, "httpSession.getAttribute('de.innovationgate.wgpublisher.webtml.Query.SIMPLIFIED_LUCENE_QUERY') == null");
			
			// No good ways to verify these, other than test that they actually can get called
			bestFragments("body", 10, 1);
			bestFragments("body", 10, 1, "<b>", "</b>");
			bestFragments("body", 10, 1, "<b>", "</b>", "html");
			highlightItem("body", "<b>", "<b>");
			highlightItem("body", "<b>", "<b>", "html");
			
			login("ow", "Heidi", "hsql");
			assertEquals("login(user, pwd, domain)", cat, context("db:inittest").meta("db", "username"), "ow");
			
			// No good ways to verify these, other than test that they actually can get called
			changeSessionPassword("hsql", "Heidi");
			logout("hsql"); // Only effective on next request
			waitForAuthUpdates(WGA.db("logins"), 5);
		
		}
		catch (e) {
			logException(e);
			assertTrue("Exception running tests", cat, "false");
		}
	</tml:script>
	
	<tml:warnings/>
</body>
</html>