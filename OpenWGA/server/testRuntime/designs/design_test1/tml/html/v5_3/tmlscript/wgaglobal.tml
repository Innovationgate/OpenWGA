<html>

<head><tml:htmlhead/></head>

<body>
	<PRE>
	Tests availability of methods on global WGA object
	</PRE>
	
	<hr>
	
	<tml:script>
		var cat = "TMLScript:WGAGlobal";
		
		// Prepare sequence variable to be able to determine the request sequence number
		if (isdefined("seq")) {
			seq++;
		}
		else {
			setSessionVar("seq", 1);
		}
		
		try {
			
			// WGA.parseDate()
			var parsedDate = WGA.parseDate("17.01.2011 15:00", "dd.MM.yyyy HH:mm");
			assertEquals("WGA.parseDate()", cat, parsedDate.getTime(), 1295272800000);
			
			// WGA.createDate()
			createdDate1 = WGA.createDate();
			assertTrue("WGA.createDate()", cat, "createdDate1 instanceof java.util.Date");
			
			createdDate2 = WGA.createDate(false);
			assertTrue("WGA.createDate(false)", cat, "createdDate1 instanceof java.util.Date");
			
			// WGA.createForm[Info]()
			theFormInfo = WGA.createFormInfo("theform");
			assertTrue("WGA.createFormInfo(id)", cat, "theFormInfo instanceof Packages.de.innovationgate.wgpublisher.webtml.form.TMLFormInfo");
			
			theForm = WGA.createForm(theFormInfo);
			assertTrue("WGA.createForm(formInfo)", cat, "theForm instanceof Packages.de.innovationgate.wgpublisher.webtml.form.TMLForm");
			
			/* Can't test because we have no scaler in unittest environment
			theScaler = WGA.createImageScaler(db().getFileContainer("boerse").getFileData("dax.gif"));
			assertTrue("WGA.createImageScaler", cat, "theScaler instanceof Packages.de.innovationgate.utils.ImageScaler"); */
			
			// WGA.createList()
			theList1 = WGA.createList();
			assertTrue("WGA.createList()", cat, "theList1.size() == 0");
			
			theList2 = WGA.createList(["a", "b", "c"]);
			assertTrue("WGA.createList(array)", cat, "theList2.size() == 3");
			
			theList3 = WGA.createList("a,b,c", ",");
			assertTrue("WGA.createList(string, delim)", cat, "theList3.size() == 3");
			
			// WGA.createLookupTable()
			theLT = WGA.createLookupTable();
			assertTrue("WGA.createLookupTable()", cat, "theLT.size() == 0");
			
			// WGA.createMail()
			theMail1 = WGA.createMail();
			assertTrue("WGA.createMail()", cat, "theMail1 instanceof Packages.de.innovationgate.webgate.api.mail.WGMail");

			theMail2 = WGA.createMail("smtp.innovationgate.com", "ow", "Heidi"); // No those creds do not really work
			assertTrue("WGA.createMail(host, user, pwd)", cat, "theMail2 instanceof Packages.de.innovationgate.webgate.api.mail.WGMail");
			
			// WGA.createCookie()
			theCookie = WGA.createCookie("cookie", "cookie");
			assertTrue("WGA.createCookie(name, value)", cat, "theCookie instanceof Packages.javax.servlet.http.Cookie");			
			
			// WGA.parseNumber()
			theNumber = WGA.parseNumber("1,234", "0.000")
			assertEquals("WGA.parseNumber(str, format)", cat, theNumber, 1.234);
		
		
			// WGA.plugin()...
			thePlugin = WGA.plugin("de.innovationgate.contentmanager");
			assertTrue("WGA.plugin(name)", cat, "thePlugin instanceof Packages.de.innovationgate.wga.server.api.Plugin");
			assertEquals("WGA.plugin(name).db()", cat, thePlugin.db(), db("plugin-contentmanager"));
			assertEquals("WGA.plugin(name).name", cat, thePlugin.name, "de.innovationgate.contentmanager");
			assertTrue("WGA.plugin(name).version", cat, "thePlugin.version instanceof Packages.de.innovationgate.wga.common.beans.csconfig.v1.Version");
			assertTrue("WGA.plugin(name).id", cat, "thePlugin.id instanceof Packages.de.innovationgate.wga.common.beans.csconfig.v1.PluginID");
			assertEquals("WGA.db(key)", cat, WGA.db("test2"), wgacore.getContentdbs().get("test2"));
			assertEquals("WGA.hdb(key)", cat, WGA.hdb("testhdb"), Packages.de.innovationgate.webgate.api.WGHierarchicalDatabase.getOrCreateInstance(wgacore.getContentdbs().get("testhdb")));
			assertEquals("WGA.Core", cat, WGA.Core, wgacore);
			
			otherPlugin = WGA.plugin(db("plugin-contentmanager"));
			assertTrue("WGA.plugin(db)", cat, "otherPlugin instanceof Packages.de.innovationgate.wga.server.api.Plugin");
			assertEquals("WGA.plugin(db).name", cat, otherPlugin.name, "de.innovationgate.contentmanager");
			
			// WGA.encode()
			encodedStr = WGA.encode("html", "<br>");
			assertEquals("WGA.encode(enc, str)", cat, encodedStr, "&#60;br&#62;");
			
			// WGA.callAction()
			actionRV = WGA.callAction("::anaction");
			assertEquals("WGA.callAction(id)", cat, actionRV, "Yes!");
			
			// WGA.createObject()
			theObject = WGA.createObject("::anobject");
			assertEquals("WGA.createObject(id)", cat, theObject.doIt(), "Still:yes!");
			
			// WGA.deleteDoublets()
			var someList = WGA.createList(["a", "b", "a", "c"]);
			noDoublets = WGA.deleteDoublets(someList);
			assertTrue("WGA.deleteDoublets(list)", cat, "noDoublets.size() == 3");
			
			// WGA.[de]serializeObject()
			var serialized = WGA.serializeObject(someList);
			var deserialized = WGA.deserializeObject(serialized);
			assertEquals("WGA.serialize/deserializeObject()", cat, deserialized, someList);
			
			// WGA.format();
			var formattedDate = WGA.format(parsedDate, "dd.MM.yyyy");
			assertEquals("WGA.format(format, str)", cat, formattedDate, "17.01.2011");
			
			// WGA.getLookupKeys()
			var aMap = createLookupTable();
			aMap.put("a", 1);
			aMap.put(2, "b");
			assertEquals("WGA.getLookupKeys(map)", cat, WGA.getLookupKeys(aMap), new java.util.ArrayList(aMap.keySet()));
			
			// WGA.javaObject()
			var trimmed = WGA.javaObject(" trimmed ").trim();
			assertEquals("WGA.javaObject(obj)", cat, trimmed, "trimmed");
			
			// WGA.loadObjectDefinition()
			var objdef = WGA.loadObjectDefinition("::anobject");
			var anotherObject = WGA.createObject(objdef);
			assertEquals("WGA.loadObjectDefinition(id)", cat, anotherObject.doIt(), "Still:yes!");
			
			// WGA.sortList() tested in dedicated Unittest
		
			// WGA.synchronizedFunction()
			var someFun = function() { return "And yes again!" };
			var syncedFun = WGA.synchronizedFunction(someFun);
			assertEquals("WGA.synchronizedFunction(fun)", cat, syncedFun(), "And yes again!");
			
			// WGA.Xml...
			doc1 = WGA.Xml.create();
			assertTrue("WGA.Xml.create()", cat, "doc1 instanceof Packages.org.dom4j.Document");
			
			var someXml = "<doc><elem>Hallo!</elem></doc>";
			doc2 = WGA.Xml.parse(someXml);
			assertEquals("WGA.Xml.parse(xml)", cat, doc2.getRootElement().getName(), "doc");
			
			xpath1 = WGA.Xml.xpath(someXml, "/doc/elem/text()");
			assertEquals("WGA.Xml.xpath(xml, path)", cat, xpath1, "Hallo!");
			
			xpath2 = WGA.Xml.xpathList(someXml, "/doc/elem/text()");
			assertEquals("WGA.Xml.xpathList(xml, path)", cat, xpath2, createList(["Hallo!"]));
			
			doc3 = WGA.Xml.load(meta("request", "absolutewgaurl") + "/test1/file/xml/designvariants.xml");
			assertEquals("WGA.Xml.load(url)", cat, doc3.getRootElement().getName(), "data");
			
			// WGA.Master...
			var gimmeMaster = function(p1) {  return meta("db", "username") + ":" + p1 };
			var masterName1 = WGA.Master.runFunction(gimmeMaster, "Param!");
			assertEquals("WGA.Master.runFunction(fun, param)", cat, masterName1, "Master Session:Param!"); 
			
			var masterName2 = theObject.doMaster("Objectparam!");
			assertEquals("WGA.Master.runMethod(fun, param)", cat, masterName2, "Master Session:Objectparam!:privateValue:privateFunctionResult:publicValue:publicFunctionResult");
			
			// WGA.design()...
			var test3obj = WGA.createObject("test3/v5_3:tmlscript:anobject");
			assertEquals("WGA.design(obj).label()", cat, test3obj.theLabel(), "Das Label von test3");
			assertEquals("WGA.design(obj).db()", cat, test3obj.theDB(), WGA.db("test3"));
			
			var test3obj = WGA.design("test3").createObject("v5_3:tmlscript:anobject");
			assertEquals("WGA.design(dbkey).createObject()", cat, test3obj.theLabel(), "Das Label von test3");
			
			var test3objDef = WGA.design("test3").loadObjectDefinition("v5_3:tmlscript:anobject");
			var test3obj = WGA.design("test3").createObject(test3objDef);
			assertEquals("WGA.design(dbkey).loadObjectDefinition()", cat, test3obj.theLabel(), "Das Label von test3");
			
			assertEquals("WGA.design(dbkey).callAction()", cat, WGA.design("test3").callAction("v5_3:tmlscript:anaction"), "an action from test3");
			
			assertEquals("WGA.design(db).db()", cat, WGA.design(WGA.db("test3")).db(), WGA.db("test3"));
			assertEquals("WGA.design(dbkey).db()", cat, WGA.design("test3").db(), WGA.db("test3"));
			
			WGA.design().registerGlobal("ThatUnittestObject", anotherObject);
			assertEquals("WGA.design().registerGlobal(name, obj)", cat, ThatUnittestObject.doIt(), "Still:yes!");
			
			WGA.design().registerDbGlobal("ThatOtherUnittestObject", anotherObject);
			assertEquals("WGA.design().registerGlobal(name, obj, db)", cat, ThatOtherUnittestObject.doIt(), "Still:yes!");
			
			var afwLabel = WGA.design('@afw').label('format.date.short');
			assertEquals("WGA.design('@afw').label()", cat, afwLabel, "dd.MM.yyyy");
			
			// WGA.Html...
			var html1 = WGA.Html.load(meta("request", "absolutewgaurl") + "/test1/file/html/test.html");
			assertEquals("WGA.Html.load(url)", cat, html1.selectSingleNode("/HTML/BODY").getTextTrim(), "Hallo!");
			
			var html2Code = Packages.de.innovationgate.utils.WGUtils.readString(db().getFileContainer("html").getFileData("test.html"), "UTF-8");
			var html2 = WGA.Html.parse(html2Code);
			assertEquals("WGA.Html.parse(url)", cat, html2.selectSingleNode("/HTML/BODY").getTextTrim(), "Hallo!");
			
			// WGA.lucene()...
			lucene1 = WGA.lucene();
			assertTrue("WGA.lucene()", cat, "lucene1 instanceof Packages.de.innovationgate.wga.server.api.Lucene");
			
			lucene2 = WGA.lucene(this);
			assertTrue("WGA.lucene(cx)", cat, "lucene2 instanceof Packages.de.innovationgate.wga.server.api.Lucene");
			
			luceneRS1 = lucene1.search("Webgate");
			assertTrue("WGA.lucene().search(phrase)", cat, "luceneRS1 instanceof Packages.de.innovationgate.webgate.api.WGResultSet");
			
			luceneRS2 = lucene2.search("Webgate", "db");
			assertTrue("WGA.lucene().search(phrase, scope)", cat, "luceneRS2 instanceof Packages.de.innovationgate.webgate.api.WGResultSet");
			
			lucene1.removeQuery();
			assertTrue("WGA.lucene().removeQuery()", cat, "httpSession.getAttribute('de.innovationgate.wgpublisher.webtml.Query.SIMPLIFIED_LUCENE_QUERY') == null");
			
			// No good ways to verify these, other than test that they actually can get called
			lucene1.bestFragments("body", 10, 1);
			lucene1.bestFragments("body", 10, 1, "<b>", "</b>");
			lucene1.bestFragments("body", 10, 1, "<b>", "</b>", "html");
			lucene1.highlightItem("body", "<b>", "<b>");
			lucene1.highlightItem("body", "<b>", "<b>", "html");
			lucene1.highlightMeta("TITLE", "<b>", "<b>");
			lucene1.highlightMeta("TITLE", "<b>", "<b>", "html");
			
			// WGA.Auth...
			WGA.Auth.login("ow", "Heidi", "hsql");
			assertEquals("WGA.Auth.login(user, pwd, domain)", cat, context("db:inittest").meta("db", "username"), "ow");
			
			// No good ways to verify these, other than test that they actually can get called
			WGA.Auth.changeSessionPassword("hsql", "Heidi");
			WGA.Auth.logout("hsql"); // Only effective on next request
			WGA.Auth.waitForUpdates(WGA.db("logins"), 5);
			
			
			// WGA.urlBuilder()...
			var builder = WGA.urlBuilder();
			assertEquals("WGA.urlBuilder()", cat, builder.getClass().getName(), "de.innovationgate.wgpublisher.webtml.utils.URLBuilder");
			
			var builder = WGA.urlBuilder(contenturl(null, null));
			assertEquals("WGA.urlBuilder(url)", cat, builder.getClass().getName(), "de.innovationgate.wgpublisher.webtml.utils.URLBuilder");
		
		}
		catch (e) {
			logException(e);
			assertTrue("Exception running tests", cat, "false");
		}
	</tml:script>
	
	<tml:warnings/>
</body>
</html>