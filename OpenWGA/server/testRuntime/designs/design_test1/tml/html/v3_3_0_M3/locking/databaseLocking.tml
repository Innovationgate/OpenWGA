<html>
<head>
  <tml:htmlhead/>
</head>

<tml:action  master="true" async="true" id="a_action_1">
	var category = "locking:databaseLocking(a_action_1)";
	try {
		// lock db
		var lockDBStartTime = java.lang.System.currentTimeMillis();
		this.db().lock();	
		assertequals("db locked successfully", category, true, true);
		var lockDBEndTime = java.lang.System.currentTimeMillis();
		durationDB = (lockDBEndTime - lockDBStartTime);
				
		asserttrue("db locked within 1s", category, "durationDB < 1000");			
		
		var docA = this.context("docid:owee-5aegzr").getdocument();
		
		// do some work
		Packages.java.lang.Thread.sleep(10000);
	
		var saveResult = docA.save();
		assertequals("document A saved successfully", category, saveResult, true);
	} catch (e) {
		asserttrue("no exception thrown", category, "false");
	}	
</tml:action>

<tml:action async="true" master="true" id="b_action_1">
	var category = "locking:databaseLocking(b_action_1)";
	try {
		// lock db
		var lockDBStartTime = java.lang.System.currentTimeMillis();
		this.db().lock();	
		assertequals("db locked successfully", category, true, true);
		var lockDBEndTime = java.lang.System.currentTimeMillis();
		durationDB = (lockDBEndTime - lockDBStartTime);
				
		asserttrue("b have to wait for a", category, "durationDB  > 7000");			
		
		var docA = this.context("docid:owee-5aegzr").getdocument();
		
		// do some work
		Packages.java.lang.Thread.sleep(10000);
	
		var saveResult = docA.save();
		assertequals("document A saved successfully", category, saveResult, true);
	} catch (e) {
		asserttrue("no exception thrown", category, "false");
	}	
</tml:action>

<tml:action async="true" master="true" id="b_action_2">
	var category = "locking:databaseLocking(b_action_2)";
	try {
		// lock doc A
		var docA = this.context("docid:owee-5aegzr").getdocument();
		var lockStartTime = java.lang.System.currentTimeMillis();		
		docA.lock();
		assertequals("Doc 'A' locked successfully", category, true, true);
		var lockEndTime = java.lang.System.currentTimeMillis();
		duration = (lockEndTime - lockStartTime);				
		asserttrue("b have to wait for a", category, "duration  > 7000");			
				
		// do some work
		Packages.java.lang.Thread.sleep(10000);
	
		var saveResult = docA.save();
		assertequals("document A saved successfully", category, saveResult, true);				
	} catch (e) {
		asserttrue("no exception thrown", category, "false");
	}	
</tml:action>


<tml:action  master="true" async="true" id="a_action_2">
	var category = "locking:databaseLocking(a_action_2)";
	try {
		// lock db
		var lockDBStartTime = java.lang.System.currentTimeMillis();
		this.db().lock();	
		assertequals("db locked successfully", category, true, true);		
		var lockDBEndTime = java.lang.System.currentTimeMillis();
		durationDB = (lockDBEndTime - lockDBStartTime);
				
		asserttrue("db locked within 1s", category, "durationDB < 1000");			
		
		var docA = this.context("docid:owee-5aegzr").getdocument();
		
		// do some work
		Packages.java.lang.Thread.sleep(70000);
	
		var saveResult = docA.save();
		assertequals("document A saved successfully", category, saveResult, true);
	} catch (e) {
		asserttrue("no exception thrown", category, "false");
	}	
</tml:action>

<tml:action async="true" master="true" id="b_action_3">
	var category = "locking:databaseLocking(b_action_3)";
	try {
		// lock db
		this.db().lock();
		asserttrue("timeout exception thrown", category, "false");
	} catch (e) {
		assertequals("timeout exception thrown", category, e.javaException.getClass().getName(), "de.innovationgate.webgate.api.locking.LockWaitTimeoutException");
	}	
</tml:action>

<tml:action  master="true" async="true" id="a_action_3">
	var category = "locking:databaseLocking(a_action_3)";
	try {	
		var docA = this.context("docid:owee-5aegzr").getdocument();
		var lockStartTime = java.lang.System.currentTimeMillis();
		docA.lock();
		assertequals("document A locked successfully", category, true, true);		
		var lockEndTime = java.lang.System.currentTimeMillis();
		duration = (lockEndTime - lockStartTime);
		
		asserttrue("document A locked within 1s", category, "duration < 1000");	
	
		// do some work
		Packages.java.lang.Thread.sleep(10000);
	
		var saveResult = docA.save();
		assertequals("document A saved successfully", category, saveResult, true);
	} catch (e) {
		asserttrue("no exception thrown", category, "false");
	}	
</tml:action>

<tml:action  master="true" async="true" id="a_action_4">
	var category = "locking:databaseLocking(a_action_4)";	
	var docA = this.context("docid:owee-5aegzr").getdocument();
	var docB = this.context("docid:jjar-5xeqld").getdocument();
	
	try {
		var lockStartTime = java.lang.System.currentTimeMillis();
		docA.lock();
		assertequals("document A locked successfully", category, true, true);
		var lockEndTime = java.lang.System.currentTimeMillis();
		duration = (lockEndTime - lockStartTime);
		
		asserttrue("document A locked within 1s", category, "duration < 1000");		
		// do some work
		Packages.java.lang.Thread.sleep(10000);
		
		var lockStartTime = java.lang.System.currentTimeMillis();
		docB.lock();
		assertequals("document B locked successfully", category, true, true);
		var lockEndTime = java.lang.System.currentTimeMillis();
		duration = (lockEndTime - lockStartTime);
		
		asserttrue("document B locked within 1s", category, "duration < 1000");		
		// do some work
		Packages.java.lang.Thread.sleep(10000);
		
		var saveResultA = docA.save();
		assertequals("document A saved successfully", category, saveResultA, true);
		var saveResultB = docB.save();
		assertequals("document A saved successfully", category, saveResultB, true);				
		
	} catch (e) {
		asserttrue("no exception thrown", category, "false");
	}			
</tml:action>

<tml:action  master="true" async="true" id="a_action_5">
	var category = "locking:databaseLocking(a_action_5)";
	try {
		// lock db
		var lockDBStartTime = java.lang.System.currentTimeMillis();
		this.db().lock();	
		assertequals("db locked successfully", category, true, true);
		var lockDBEndTime = java.lang.System.currentTimeMillis();
		durationDB = (lockDBEndTime - lockDBStartTime);
		
		
		asserttrue("db locked within 1s", category, "durationDB < 1000");			
		
		// lock doc a
		var docA = this.context("docid:owee-5aegzr").getdocument();
		var lockDocAStartTime = java.lang.System.currentTimeMillis();
		docA.lock();
		assertequals("document A locked successfully", category, true, true);		
		var lockDocAEndTime = java.lang.System.currentTimeMillis();
		durationLockDocA = (lockDocAEndTime - lockDocAStartTime);
		

		asserttrue("document A locked within 1s", category, "durationLockDocA < 1000");		
		
		// do some work
		Packages.java.lang.Thread.sleep(10000);
	
		var saveResult = docA.save();
		assertequals("document A saved successfully", category, saveResult, true);
	} catch (e) {
		asserttrue("no exception thrown", category, "false");
	}	
</tml:action>

<tml:action  master="true" async="true" id="a_action_6">
	var category = "locking:databaseLocking(a_action_6)";
	try {
		// lock db
		var lockDBStartTime = java.lang.System.currentTimeMillis();
		this.db().lock();	
		assertequals("db locked successfully", category, true, true);
		var lockDBEndTime = java.lang.System.currentTimeMillis();
		durationDB = (lockDBEndTime - lockDBStartTime);
				
		asserttrue("db locked within 1s", category, "durationDB < 1000");			
		
		// lock doc a
		var docA = this.context("docid:owee-5aegzr").getdocument();
		var lockDocAStartTime = java.lang.System.currentTimeMillis();
		docA.lock();
		assertequals("document A locked successfully", category, true, true);
		var lockDocAEndTime = java.lang.System.currentTimeMillis();
		durationLockDocA = (lockDocAEndTime - lockDocAStartTime);
		
		
		asserttrue("document A locked within 1s", category, "durationLockDocA < 1000");	
		
		// lock doc b
		var docB = this.context("docid:jjar-5xeqld").getdocument();
		var lockDocBStartTime = java.lang.System.currentTimeMillis();
		docB.lock();
		assertequals("document B locked successfully", category, true, true);
		var lockDocBEndTime = java.lang.System.currentTimeMillis();
		durationLockDocB = (lockDocBEndTime - lockDocBStartTime);
		
		
		asserttrue("document B locked within 1s", category, "durationLockDocB < 1000");	
		
		// unlock db
		this.db().unlock();
				
		// do some work
		Packages.java.lang.Thread.sleep(30000);
	
		var saveResultA = docA.save();
		assertequals("document A saved successfully", category, saveResultA, true);
		var saveResultB = docB.save();
		assertequals("document B saved successfully", category, saveResultB, true);
	} catch (e) {
		asserttrue("no exception thrown", category, "false");
	}	
</tml:action>

<tml:action  master="true" async="true" id="b_action_4">
	var category = "locking:databaseLocking(b_action_4)";
	try {					
		// lock doc b
		var docB = this.context("docid:jjar-5xeqld").getdocument();
		var lockDocBStartTime = java.lang.System.currentTimeMillis();
		docB.lock();
		assertequals("document B locked successfully", category, true, true);
		var lockDocBEndTime = java.lang.System.currentTimeMillis();
		durationLockDocB = (lockDocBEndTime - lockDocBStartTime);
		
		
		asserttrue("b have to wait for a", category, "durationLockDocB > 15000");	

		// do some work
		Packages.java.lang.Thread.sleep(10000);

		var saveResultB = docB.save();
		assertequals("document B saved successfully", category, saveResultB, true);
	} catch (e) {
		asserttrue("no exception thrown", category, "false");
	}	
</tml:action>

<tml:action  master="true" async="true" id="a_action_7">
	var category = "locking:databaseLocking(a_action_7)";
	try {
		// lock db
		var lockDBStartTime = java.lang.System.currentTimeMillis();
		this.db().lock();	
		assertequals("db locked successfully", category, true, true);		
		var lockDBEndTime = java.lang.System.currentTimeMillis();
		durationDB = (lockDBEndTime - lockDBStartTime);
				
		asserttrue("db locked within 1s", category, "durationDB < 1000");			
		
		// lock doc a
		var docA = this.context("docid:owee-5aegzr").getdocument();
		var lockDocAStartTime = java.lang.System.currentTimeMillis();
		docA.lock();
		assertequals("document A locked successfully", category, true, true);		
		var lockDocAEndTime = java.lang.System.currentTimeMillis();
		durationLockDocA = (lockDocAEndTime - lockDocAStartTime);
				
		asserttrue("document A locked within 1s", category, "durationLockDocA < 1000");	
		
		// lock doc b
		var docB = this.context("docid:jjar-5xeqld").getdocument();
		var lockDocBStartTime = java.lang.System.currentTimeMillis();
		docB.lock();
		assertequals("document B locked successfully", category, true, true);
		var lockDocBEndTime = java.lang.System.currentTimeMillis();
		durationLockDocB = (lockDocBEndTime - lockDocBStartTime);
		
		
		asserttrue("document B locked within 1s", category, "durationLockDocB < 1000");	
		
		// unlock db
		this.db().unlock();
				
		// do some work
		Packages.java.lang.Thread.sleep(10000);
	
		var saveResultA = docA.save();
		assertequals("document A saved successfully", category, saveResultA, true);
		var saveResultB = docB.save();
		assertequals("document B saved successfully", category, saveResultB, true);
	} catch (e) {
		asserttrue("no exception thrown", category, "false");
	}	
</tml:action>

<tml:action  master="true" async="true" id="a_action_8">
	var category = "locking:databaseLocking(a_action_8)";
	try {			
		// lock doc a
		var docA = this.context("docid:owee-5aegzr").getdocument();
		var lockDocAStartTime = java.lang.System.currentTimeMillis();
		docA.lock();
		assertequals("document A locked successfully", category, true, true);
		var lockDocAEndTime = java.lang.System.currentTimeMillis();
		durationLockDocA = (lockDocAEndTime - lockDocAStartTime);
				
		asserttrue("document A locked within 1s", category, "durationLockDocA < 1000");	
		
		// lock doc b
		var docB = this.context("docid:jjar-5xeqld").getdocument();
		var lockDocBStartTime = java.lang.System.currentTimeMillis();
		docB.lock();
		assertequals("document B locked successfully", category, true, true);
		var lockDocBEndTime = java.lang.System.currentTimeMillis();
		durationLockDocB = (lockDocBEndTime - lockDocBStartTime);
				
		asserttrue("document B locked within 1s", category, "durationLockDocB < 1000");	
					
		// do some work
		Packages.java.lang.Thread.sleep(10000);
		
		// save doc B
		var saveResultB = docB.save();
		assertequals("document B saved successfully", category, saveResultB, true);
		
		// unlock docB
		docB.unlock();
		
		// do some work
		Packages.java.lang.Thread.sleep(60000);
		
		// save docA
		var saveResultA = docA.save();
		assertequals("document A saved successfully", category, saveResultA, true);

	} catch (e) {
		asserttrue("no exception thrown", category, "false");
	}	
</tml:action>

<tml:action  master="true" async="true" id="b_action_5">
	var category = "locking:databaseLocking(b_action_5)";
	try {	
		var seD = this.context("docid:jjar-62vllp").getdocument().getStructEntry();		
		var lockStartTime = java.lang.System.currentTimeMillis();	
		seD.lock();
		assertequals("structentry D locked successfully", category, true, true);
		var lockEndTime = java.lang.System.currentTimeMillis();
		duration = (lockEndTime - lockStartTime);		
		asserttrue("b have to wait for a", category, "duration  > 7000");			
		
		// do some work
		Packages.java.lang.Thread.sleep(10000);	
		var saveResult = seD.save();
		assertequals("structentry D saved successfully", category, saveResult, true);
	} catch (e) {
		asserttrue("no exception thrown", category, "false");
	}	
</tml:action>

<tml:action  master="true" async="true" id="a_action_9">
	var category = "locking:databaseLocking(a_action_9)";
	try {	
		var seC = this.context("docid:jjar-5xeqb5").getdocument().getStructEntry();				
		var lockStartTime = java.lang.System.currentTimeMillis();
		seC.lock();
		assertequals("structentry C locked successfully", category, true, true);
		var lockEndTime = java.lang.System.currentTimeMillis();
		duration = (lockEndTime - lockStartTime);		
		asserttrue("structentry C locked within 1s", category, "duration < 1000");	
	
		// do some work
		Packages.java.lang.Thread.sleep(10000);	
		var saveResult = seC.save();
		assertequals("structentry C saved successfully", category, saveResult, true);
	} catch (e) {
		asserttrue("no exception thrown", category, "false");
	}	
</tml:action>

<tml:action async="true" master="true" id="b_action_6">
	var category = "locking:databaseLocking(b_action_6)";
	try {
		// lock db
		var lockDBStartTime = java.lang.System.currentTimeMillis();
		this.db().lock();	
		assertequals("db locked successfully", category, true, true);
		var lockDBEndTime = java.lang.System.currentTimeMillis();
		durationDB = (lockDBEndTime - lockDBStartTime);
				
		asserttrue("b have to wait for a", category, "durationDB  > 15000");			
		
		var docA = this.context("docid:owee-5aegzr").getdocument();
		
		// do some work
		Packages.java.lang.Thread.sleep(10000);
	
		var saveResult = docA.save();
		assertequals("document A saved successfully", category, saveResult, true);
	} catch (e) {
		asserttrue("no exception thrown", category, "false");
	}	
</tml:action>

<tml:action async="true" master="true" id="b_action_7">
	var category = "locking:databaseLocking(b_action_7)";
	try {
		// lock area
		var area = this.db().getArea("online-help");
		var lockStartTime = java.lang.System.currentTimeMillis();
		area.lock();	
		assertequals("area locked successfully", category, true, true);
		var lockEndTime = java.lang.System.currentTimeMillis();
		duration = (lockEndTime - lockStartTime);				
		asserttrue("b have to wait for a", category, "duration  > 7000");			

		// do some work
		Packages.java.lang.Thread.sleep(10000);
	
		var saveResult = area.save();
		assertequals("area A saved successfully", category, saveResult, true);
	} catch (e) {
		asserttrue("no exception thrown", category, "false");
	}	
</tml:action>

<tml:action  master="true" async="true" id="a_action_10">
	var category = "locking:databaseLocking(a_action_10)";
	try {	
		var area = this.db().getArea("home");
		var lockStartTime = java.lang.System.currentTimeMillis();
		area.lock();
		assertequals("area locked successfully", category, true, true);
		var lockEndTime = java.lang.System.currentTimeMillis();
		duration = (lockEndTime - lockStartTime);		
		asserttrue("area locked within 1s", category, "duration < 1000");	
	
		// do some work
		Packages.java.lang.Thread.sleep(10000);	
		var saveResult = area.save();
		assertequals("area saved successfully", category, saveResult, true);
	} catch (e) {
		asserttrue("no exception thrown", category, "false");
	}	
</tml:action>


<body>
	<tml:button clickaction="a_action_1" id="a_action_1">a_action_1</tml:button>
	<tml:button clickaction="a_action_2" id="a_action_2">a_action_2</tml:button><br/>	
	<tml:button clickaction="a_action_3" id="a_action_3">a_action_3</tml:button>
	<tml:button clickaction="a_action_4" id="a_action_4">a_action_4</tml:button><br/>
	<tml:button clickaction="a_action_5" id="a_action_5">a_action_5</tml:button>
	<tml:button clickaction="a_action_6" id="a_action_6">a_action_6</tml:button><br/>
	<tml:button clickaction="a_action_7" id="a_action_7">a_action_7</tml:button>
	<tml:button clickaction="a_action_8" id="a_action_8">a_action_8</tml:button><br/>
	<tml:button clickaction="a_action_9" id="a_action_9">a_action_9</tml:button>	
	<tml:button clickaction="a_action_10" id="a_action_10">a_action_10</tml:button>	
	<hr/>
	<tml:button clickaction="b_action_1" id="b_action_1">b_action_1</tml:button>
	<tml:button clickaction="b_action_2" id="b_action_2">b_action_2</tml:button><br/>	
	<tml:button clickaction="b_action_3" id="b_action_3">b_action_3</tml:button>
	<tml:button clickaction="b_action_4" id="b_action_4">b_action_4</tml:button><br/>	
	<tml:button clickaction="b_action_5" id="b_action_5">b_action_5</tml:button>	
	<tml:button clickaction="b_action_6" id="b_action_6">b_action_6</tml:button><br/>		
	<tml:button clickaction="b_action_7" id="b_action_7">b_action_7</tml:button>	
	
	<hr/>
	<table border="1">
	 <th>test</th><th>thread a</th><th>thread b</th><th>actions to call</th><th>wait until next test is started</th>
	 <tr>
	  <td>1</td>
	  <td>
	  	<table>
	  		<tr><td>lock DB</td></tr>
	  		<tr><td>get doc 'A'</td></tr>
	  		<tr><td>do work 10s</td></tr>
	  		<tr><td>save doc 'A'</td></tr>
	  	</table>
	  </td>
	  <td>none</td>			
	  <td>a_action_1</td>
  	  <td>20s</td>
	 </tr>
	 <tr>
	  <td>2</td>
	  <td>
	  	<table>
	  		<tr><td>lock DB</td></tr>
	  		<tr><td>get doc 'A'</td></tr>
	  		<tr><td>do work 10s</td></tr>
	  		<tr><td>save doc 'A'</td></tr>
	  	</table>
	  </td>
	  <td>
	  	 <table>
	  		<tr><td>lock DB</td></tr>
	  		<tr><td>have to wait for A</td></tr>
	  		<tr><td>get doc 'A'</td></tr>
	  		<tr><td>do work 10s</td></tr>
			<tr><td>save doc 'A'</td></tr>
	  	</table>
	  </td>			
	  <td>a_action_1, wait 1s, b_action_1</td>
  	  <td>30s</td>
	 </tr>
	 <tr>
	  <td>3</td>
	  <td>
	  	<table>
	  		<tr><td>lock DB</td></tr>
	  		<tr><td>get doc 'A'</td></tr>
	  		<tr><td>do work 10s</td></tr>
	  		<tr><td>save doc 'A'</td></tr>
	  	</table>
	  </td>
	  <td>
	  	 <table>
	  		<tr><td>lock doc 'A'</td></tr>
	  		<tr><td>have to wait for A</td></tr>
	  		<tr><td>do work 10s</td></tr>	  		
	  		<tr><td>save doc 'A'</td></tr>	  			  		
	  	</table>
	  </td>			
	  <td>a_action_1, wait 1s, b_action_2</td>
  	  <td>30s</td>
	 </tr>	 
	 <tr>
	  <td>4</td>
	  <td>
	  	<table>
	  		<tr><td>lock DB</td></tr>
	  		<tr><td>get doc 'A'</td></tr>
	  		<tr><td>do work 70s</td></tr>
	  		<tr><td>save doc 'A'</td></tr>
	  	</table>
	  </td>
	  <td>
	  	 <table>
	  		<tr><td>lock DB</td></tr>
	  		<tr><td>get timeout exception</td></tr>
	  	</table>
	  </td>			
	  <td>a_action_2, wait 1s, b_action_3</td>
	  <td>80s</td>
	 </tr>	 	
	 <tr>
	  <td>5</td>
	  <td>
	  	<table>
	  		<tr><td>lock doc 'A'</td></tr>
	  		<tr><td>do work 10s</td></tr>
	  		<tr><td>save doc 'A'</td></tr>
	  	</table>
	  </td>
	  <td>
	  	 <table>
	  		<tr><td>lock DB</td></tr>
	  		<tr><td>have to wait for A</td></tr>
	  		<tr><td>get doc 'A'</td></tr>
	  		<tr><td>do work 10s</td></tr>
			<tr><td>save doc 'A'</td></tr>
	  	</table>
	  </td>			
	  <td>a_action_3, wait 1s, b_action_1</td>
	  <td>30s</td>
	 </tr>	  	 
	 <tr>
	  <td>6</td>
	  <td>
	  	<table>
	  		<tr><td>lock doc 'A'</td></tr>
	  		<tr><td>do work 10s</td></tr>
			<tr><td>lock doc 'B'</td></tr>
			<tr><td>do work 10s</td></tr>			
			<tr><td>save doc 'A'</td></tr>			
	  		<tr><td>save doc 'B</td></tr>
	  	</table>
	  </td>
	  <td>
	  	 <table>
	  		<tr><td>lock DB</td></tr>
	  		<tr><td>have to wait for A >15s</tr>
	  		<tr><td>get doc 'A'</td></tr>
	  		<tr><td>do work 10s</td></tr>
			<tr><td>save doc 'A'</td></tr>
	  	</table>
	  </td>			
	  <td>a_action_4, wait 1s, b_action_6</td>
	  <td>40s</td>
	 </tr>	  	 
	 <tr>
	  <td>7</td>
	  <td>
	  	<table>
	  		<tr><td>lock DB</td></tr>
	  		<tr><td>lock doc 'A'</td></tr>
	  		<tr><td>do work 10s</td></tr>
	  		<tr><td>save doc 'A'</td></tr>
	  	</table>
	  </td>
	  <td>
	  	 <table>
	  		<tr><td>lock doc 'A'</td></tr>
	  		<tr><td>have to wait for A</td></tr>
	  		<tr><td>do work 10s</td></tr>	  		
	  		<tr><td>save doc 'A'</td></tr>	
	  	</table>
	  </td>			
	  <td>a_action_5, wait 1s, b_action_2</td>
  	  <td>30s</td>
	 </tr>		 
	 <tr>
	  <td>8</td>
	  <td>
	  	<table>
	  		<tr><td>lock DB</td></tr>
	  		<tr><td>lock doc 'A'</td></tr>
	  		<tr><td>lock doc 'B'</td></tr>
	  		<tr><td>unlock DB</td></tr>	  		
	  		<tr><td>do work 30s</td></tr>
	  		<tr><td>save doc 'A'</td></tr>
	  		<tr><td>save doc 'B'</td></tr>	  		
	  	</table>
	  </td>
	  <td>
	  	 <table>
	  		<tr><td>lock doc 'B'</td></tr>
	  		<tr><td>have to wait for A > 15s</td></tr>
	  		<tr><td>do work 10s</td></tr>
	  		<tr><td>save doc 'B'</td></tr>	  		
	  	</table>
	  </td>			
	  <td>a_action_6, wait 10s (to let A perform db.unLock()), b_action_4</td>
  	  <td>50s</td>
	 </tr>		
	 <tr>
	  <td>9</td>
	  <td>
	  	<table>
	  		<tr><td>lock DB</td></tr>
	  		<tr><td>lock doc 'A'</td></tr>
	  		<tr><td>lock doc 'B'</td></tr>
	  		<tr><td>unlock DB</td></tr>	  		
	  		<tr><td>do work 10s</td></tr>
	  		<tr><td>save doc 'A'</td></tr>
	  		<tr><td>save doc 'B'</td></tr>	  		
	  	</table>
	  </td>
	  <td>
	  	 <table>
	  		<tr><td>lock DB</td></tr>
	  		<tr><td>have to wait for A</td></tr>
	  		<tr><td>get doc 'A'</td></tr>
	  		<tr><td>do work 10s</td></tr>
			<tr><td>save doc 'A'</td></tr>	  		
	  	</table>
	  </td>			
	  <td>a_action_7, wait 1s, b_action_1</td>
  	  <td>30s</td>
	 </tr>	 
	 <tr>
	  <td>10</td>
	  <td>
	  	<table>
	  		<tr><td>lock doc 'A'</td></tr>
	  		<tr><td>lock doc 'B'</td></tr> 		
	  		<tr><td>do work 10s</td></tr>
	  		<tr><td>save doc 'B'</td></tr>
	  		<tr><td>unlock doc 'B'</td></tr>
	  		<tr><td>do work 60s</td></tr>	  		
	  		<tr><td>save doc 'A'</td></tr>	  		
	  	</table>
	  </td>
	  <td>
	  	 <table>
	  		<tr><td>lock DB</td></tr>
	  		<tr><td>get timeout - waiting for doc release of A</td></tr>
	  	</table>
	  </td>			
	  <td>a_action_8, wait 5s (to let A obtain doc-locks), b_action_3</td>
  	  <td>80s</td>
	 </tr>	  
	 <tr>
	  <td>11</td>
	  <td>
	  	<table>
	  		<tr><td>lock DB</td></tr>
	  		<tr><td>lock doc 'A'</td></tr> 		
	  		<tr><td>do work 10s</td></tr>
	  		<tr><td>save doc 'A'</td></tr>
	  	</table>
	  </td>
	  <td>
	  	 <table>
	  		<tr><td>lock SE 'D'</td></tr>
	  		<tr><td>b have to wait for a</td></tr>
	  		<tr><td>do work 10s</td></tr>
	  		<tr><td>save SE 'D'</td></tr>
	  	</table>
	  </td>			
	  <td>a_action_5, wait 1s, b_action_5</td>
  	  <td>30s</td>
	 </tr>	
	 <tr>
	  <td>12</td>
	  <td>
	  	<table>
	  		<tr><td>lock SE 'C'</td></tr>
	  		<tr><td>do work 10s</td></tr>
	  		<tr><td>save SE 'C'</td></tr>
	  	</table>
	  </td>
	  <td>
	  	 <table>
	  		<tr><td>lock DB</td></tr>
	  		<tr><td>have to wait for A</td></tr>	  		
	  		<tr><td>get doc 'A'</td></tr> 		
	  		<tr><td>do work 10s</td></tr>
	  		<tr><td>save doc 'A'</td></tr>
	  	</table>
	  </td>			
	  <td>a_action_9, wait 1s, b_action_1</td>
  	  <td>30s</td>
	 </tr>	
	 <tr>
	  <td>13</td>
	  <td>
	  	<table>
	  		<tr><td>lock DB</td></tr>
	  		<tr><td>get doc 'A'</td></tr>	  		
	  		<tr><td>do work 10s</td></tr>
	  		<tr><td>save doc 'A'</td></tr>
	  	</table>
	  </td>
	  <td>
	  	 <table>
	  		<tr><td>lock area</td></tr>
	  		<tr><td>have to wait for A</td></tr>	  		
	  		<tr><td>do work 10s</td></tr>
	  		<tr><td>save area</td></tr>
	  	</table>
	  </td>			
	  <td>a_action_1, wait 1s, b_action_7</td>
  	  <td>30s</td>
	 </tr>	 
	 <tr>
	  <td>14</td>
	  <td>
	  	<table>
	  		<tr><td>lock area</td></tr>
	  		<tr><td>do work 10s</td></tr>
	  		<tr><td>save area</td></tr>
	  	</table>
	  </td>
	  <td>
	  	 <table>
	  		<tr><td>lock DB</td></tr>
	  		<tr><td>have to wait for A</td></tr>	  		
	  		<tr><td>get doc 'A'</td></tr>
	  		<tr><td>do work 10s</td></tr>
	  		<tr><td>save doc 'A'</td></tr>
	  	</table>
	  </td>			
	  <td>a_action_10, wait 2s, b_action_1</td>
  	  <td>30s</td>
	 </tr>		  	 
	</table>		
</body>


</html>