<html>
<body>
<pre>
</pre>
<tml:script>

var cat = "WGAPI:ContentEvents:" + db().getDbReference();
try {
	var parent = db().getContentByName("eventTestRoot", "de").getStructEntry();
	var struct = parent.createChildEntry(db().getContentType("eventtest"), "EventTest");
	struct.save();
	
	var content = struct.createContent(db().getLanguage("de"), "EventTest");
	assertEquals("Executed contentCreated event", cat, content.getItemText("createContentEvent"), "done");
	assertEquals("Document accessible in contentCreated event", cat, content.getItemText("createContentDocumentAccessible"), "true");
	
	content.save();
	assertEquals("Executed contentSaved event", cat, content.getItemText("saveContentEvent"), "done");
	assertEquals("Document accessible in contentSaved event", cat, content.getItemText("saveContentDocumentAccessible"), "true");
	
	content.publish("");
	
	assertEquals("Executed workflowMail event", cat, content.getItemText("workflowMailEvent"), "done");
	assertEquals("Document accessible in workflowMail event", cat, content.getItemText("workflowMailDocumentAccessible"), "true");
	
	content.archive("");
	var newContent = content.createDraftCopy();
	
	if (db().contentStoreVersion >= db().CSVERSION_WGA5) {
		assertEquals("Executed statusChange event", cat, content.getItemText("statusChangeEvent"), "done");
		assertEquals("Document accessible in statusChange event", cat, content.getItemText("statusChangeDocumentAccessible"), "true");
		assertEquals("States in statusChange event", cat, content.getItemValueList("statusChangeStates"), createList(['g', 'p', 'a']));
		assertEquals("Previous states in statusChange event", cat, content.getItemValueList("statusChangePreviousStates"), createList(['w', 'g', 'p']));
		
		assertEquals("States in statusChange event of new draft", cat, newContent.getItemValueList("statusChangeStates"), createList(['g', 'p', 'a', 'w']));
		assertEquals("Previous states in statusChange event of new draft", cat, newContent.getItemValueList("statusChangePreviousStates"), createList(['w', 'g', 'p', 'a']));
		
		// Create a new doc without workflow to test statusChange event in this case
		var v5struct = parent.createChildEntry(db().getContentType("eventtest"), "EventTestv5");
		v5struct.setWorkflowName("#none");
		v5struct.save();
		
		var v5content = v5struct.createContent(db().getLanguage("de"), "EventTestv5");
		v5content.publish("");
		var v5newContent = v5content.createDraftCopy();
		
		assertEquals("No workflow: Executed statusChange event", cat, v5content.getItemText("statusChangeEvent"), "done");
		assertEquals("No workflow: Document accessible in statusChange event", cat, v5content.getItemText("statusChangeDocumentAccessible"), "true");
		assertEquals("No workflow: States in statusChange event", cat, v5content.getItemValueList("statusChangeStates"), createList(['p']));
		assertEquals("No workflow: Previous states in statusChange event", cat, v5content.getItemValueList("statusChangePreviousStates"), createList(['w']));
		
		assertEquals("No workflow: States in statusChange event of new draft", cat, v5newContent.getItemValueList("statusChangeStates"), createList(['p', 'w']));
		assertEquals("No workflow: Previous states in statusChange event of new draft", cat, v5newContent.getItemValueList("statusChangePreviousStates"), createList(['w', 'p']));
		
		v5struct.remove();
		
	}	
	
	struct.remove();
}
catch (e) {
	assertTrue("Error executing test: " + e.message, cat, "false");
}


</tml:script>
<tml:warnings/>
</body>
</html>