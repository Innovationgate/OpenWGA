<html>

<head><tml:htmlhead/></head>

<body>
	<PRE>
	Testing behaviour of local WebTML variables (#00004605)
	</PRE>
	
	<hr>
	
	<!-- Set simple outer vars and page var -->
	<tml:script>
		_outerVar = "x";
		_outerVar2 = "l";
		WGA.TMLPage.setVar("_pageVar", "o");
	</tml:script>
	
	<tml:range id="thatRange">
		<tml:range var="_deeperVar">This is deep</tml:range>
	</tml:range>
	
	
	<tml:script>
		function findCookie(name) {
			for each (c in request.getCookies()) {
				if (c.name==name) return c.value;
			}
			return null;
		}
		var clickStep = parseInt(findCookie("clickStep"));
		var cat = findCookie("testId");
		
		try {
			assertEquals("WebTML Variable is available on same module", cat, _outerVar, "x");
			assertEquals("WebTML Variable is available on same module: Definition check", cat, isDefined("_outerVar"), true);
			assertEquals("WebTML Page Variable is available on same module", cat, _pageVar, "o");
			assertEquals("WebTML Page Variable is available on same module: Definition check", cat, isDefined("_pageVar"), true);
			assertEquals("Deeper nested WebTML Variable is available on same module", cat, _deeperVar, "This is deep");  
		}
		catch (e) {
			logException(e);
			assertTrue("Exception running tests", cat, "false");
		}
	</tml:script>
	
	<!-- Include a TML that defines its own vars and check scope isolation between it and outer layout -->
	<tml:include ref="::localvars_include" o-invocation="1" o_pagevarvalue="o"/>
	
	<tml:script>
		function findCookie(name) {
			for each (c in request.getCookies()) {
				if (c.name==name) return c.value;
			}
			return null;
		}
		var clickStep = parseInt(findCookie("clickStep"));
		var cat = findCookie("testId");
		
		try {
			assertEquals("WebTML Variable was not overwritten by include, just overloaded", cat, _outerVar, "x");
			assertEquals("Inner WebTML Variable not available in outer layout", cat, _innerVar, null);
			assertEquals("Inner WebTML Variable not available in outer layout: Definition check", cat, isdefined("_innerVar"), false);
			assertEquals("Overwritten WebTML Page Variable is available on outerlayout", cat, _pageVar, "p");
		}
		catch (e) {
			logException(e);
			assertTrue("Exception running tests", cat, "false");
		}
	</tml:script>
	
	<!-- Execute a tml:foreach with currentvalue and check whether the variable is only scoped to the tag -->
	<tml:foreach id ="theForeach" item="$mc.justCount" currentvalue="_currentCount">
	
		<tml:script>
			function findCookie(name) {
				for each (c in request.getCookies()) {
					if (c.name==name) return c.value;
				}
				return null;
			}
			var clickStep = parseInt(findCookie("clickStep"));
			var cat = findCookie("testId");
			try {
				assertEquals("Foreach current value variable is available inside the tag, iteration "+ taginfo("theForeach", "iteration"), cat, _currentCount, taginfo("theForeach", "iteration"));
			}
			catch (e) {
				logException(e);
				assertTrue("Exception running tests", cat, "false");
			}
		</tml:script>
	
	</tml:foreach>
	
	<tml:script>
		function findCookie(name) {
			for each (c in request.getCookies()) {
				if (c.name==name) return c.value;
			}
			return null;
		}
		var clickStep = parseInt(findCookie("clickStep"));
		var cat = findCookie("testId");
		
		try {
			assertEquals("Foreach current value variable is not available after the tag", cat, _currentCount, null);
			assertEquals("Foreach current value variable is not available after the tag: Definition check", cat, isdefined("_currentCount"), false);
		}
		catch (e) {
			logException(e);
			assertTrue("Exception running tests", cat, "false");
		}
	</tml:script>
	
	<!-- Call the same include again and check whether it has its own variables, separate from the first invocation -->
	<tml:include ref="::localvars_include" o-invocation="2" o_pagevarvalue="p"/>
	
	<!-- Remove pagevar -->
	<tml:script>
		removeVar("_pageVar");
		
		function findCookie(name) {
			for each (c in request.getCookies()) {
				if (c.name==name) return c.value;
			}
			return null;
		}
		var clickStep = parseInt(findCookie("clickStep"));
		var cat = findCookie("testId");
		
		try {
			assertEquals("Removed pagevar is gone", cat, _pageVar, null);
			assertEquals("Foreach current value variable is not available after the tag: Definition check", cat, isdefined("_pageVar"), false);
		}
		catch (e) {
			logException(e);
			assertTrue("Exception running tests", cat, "false");
		}
		
	</tml:script>
	
	<tml:warnings/>
</body>
</html>