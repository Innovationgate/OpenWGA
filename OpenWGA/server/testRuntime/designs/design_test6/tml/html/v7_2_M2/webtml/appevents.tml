<html>

<head><tml:htmlhead/></head>

<body>
	<PRE>
	Testing application events
	</PRE>
	
	<hr>
	
	<tml:button clickaction="$mc.sendAppEvent" id="click1">Send App Event</tml:button>
	<tml:button clickaction="$refresh" id="click2">Refresh</tml:button>
	<tml:button clickaction="$mc.sendEndlessEvent" id="click3">Send Endless Event</tml:button>
	<tml:button clickaction="$refresh" id="click4">Refresh</tml:button>
	<tml:button clickaction="$mc.sendTransactionCommitEvent" id="click5">Send Transaction Commit Event</tml:button>
	<tml:button clickaction="$refresh" id="click6">Refresh</tml:button>
	<tml:button clickaction="$mc.sendTransactionRollbackEvent" id="click7">Send Transaction Rollback Event</tml:button>
	<tml:button clickaction="$refresh" id="click8">Refresh</tml:button>
	<tml:button clickaction="$mc.sendMultipeEventPathTypes" id="click9">Send Multiple Event Path Types</tml:button>
	<tml:button clickaction="$refresh" id="click10">Refresh</tml:button>
	<tml:button clickaction="$mc.sendSubEvents" id="click11">Send Sub events</tml:button>
	<tml:button clickaction="$refresh" id="click12">Refresh</tml:button>
	<tml:button clickaction="$mc.sendSessionOnlyEvent" id="click13">Send Sub events</tml:button>
	<tml:button clickaction="$refresh" id="click14">Refresh</tml:button>
	<a id="click15" href="<tml:url type="logout"/>">Logout</a>
	<tml:button clickaction="$refresh" id="click16">Refresh</tml:button>
	
	<tml:script>
		function findCookie(name) {
			for each (c in request.getCookies()) {
				if (c.name==name) return c.value;
			}
			return null;
		}
		var clickStep = parseInt(findCookie("clickStep"));
		var cat = findCookie("testId");
		
		try {
		
			if (clickStep == 0) {
				setSessionVar("appScopeObjectHash", java.lang.System.identityHashCode(AppScopeObject));
			}
			else if (clickStep == 1) {
				WGA.Core.getPageConnectionManager().closeAllWebSockets();
				java.lang.Thread.currentThread().sleep(1000);
			}
			else if (clickStep == 2) {
				log.info("ClickStep 2: SessionScopeObject is " + SessionScopeObject.state.id);
				assertEquals("Server scope object received event data", cat, ServerScopeObject.getEventData(), "Server scope: Here is event thatEvent");
				assertEquals("Application scope object received event data", cat, AppScopeObject.getEventData(), "App scope: Here is event thatEvent");
				assertEquals("Application scope object has WGA.app() in  event", cat, AppScopeObject.dbKeyInEvent, "test6");
				assertEquals("Session scope object received event data", cat, SessionScopeObject.getEventData(), "Session scope: Here is event thatEvent");
				assertEquals("Session scope object could access session data", cat, ssoAccessingSession, "yes");
				assertEquals("Session scope object has WGA.app() in  event", cat, SessionScopeObject.state.dbKeyInEvent, "test6");
				assertEquals("Event on session scope object ran under user login", cat, SessionScopeObject.state.login, "ow");
				assertEquals("Event on application scope object ran under master login", cat, AppScopeObject.login, "Master Session");
				log.info("SessionScopeObject.id: " + SessionScopeObject.state.id + "/" + WGA.Session.javaHttpSession.id); 
			}
			else if (clickStep == 3) {
				java.lang.Thread.currentThread().sleep(3000);
			}	
			else if (clickStep == 4) {
				assertTrue("Endless event only proceeded to 5 bc. of cascading protection", cat, "AppScopeObject.endlessEventCount <= 6");
			}
			else if (clickStep == 5) {
				java.lang.Thread.currentThread().sleep(1000);
			}	
			else if (clickStep == 6) {
				assertEquals("Event thrown upon transaction commit", cat, AppScopeObject.transactionData, "Transaction commit");
			}
			else if (clickStep == 7) {
				java.lang.Thread.currentThread().sleep(1000);
			}	
			else if (clickStep == 8) {
				assertEquals("Event NOT thrown upon transaction rollback", cat, AppScopeObject.transactionData, null);
				assertEquals("AppScopeObject remained the same across all tests", cat, appScopeObjectHash, java.lang.System.identityHashCode(AppScopeObject));
			}
			else if (clickStep == 9) {
				java.lang.Thread.currentThread().sleep(1000);
			}	
			else if (clickStep == 10) {
				assertEqualLists("Event with multiple event path types received", cat, ServerScopeObject.serverEventTypes, ["Concatenated string", "String array", "String array with keys", "Object array"]);
			}
			else if (clickStep == 11) {
				java.lang.Thread.currentThread().sleep(1000);
			}	
			else if (clickStep == 12) {
				assertEqualLists("Sub event received via wildcard", cat, ServerScopeObject.wildcardSubEventTypes, ["Subevent to wildcard"]);
				assertEqualLists("Sub event received via specific name", cat, ServerScopeObject.specificNameSubEventTypes, ["Subevent with specific name"]);
				assertEquals("Access to event path in event method, path 1", cat, ServerScopeObject.specificSubEventPath.q, "subEvents");
				assertEquals("Access to event path in event method, path 2", cat, ServerScopeObject.specificSubEventPath.theData, "theValue");
			}
			else if (clickStep == 13) {
				java.lang.Thread.currentThread().sleep(1000);
			}
			else if (clickStep == 14) {
				assertTrue("Number of session > 1", cat, "WGA.Core.getActiveHttpSessions().size() > 0"); 
				assertEquals("Session only event received only once", cat, AppScopeObject.sessionOnlyEventCount, 1);
			}
			else if (clickStep == 16) {
				assertEquals("Default event for login thrown", cat, SessionScopeObject.state.hadALogin, true);
				assertEquals("Default event for logout thrown", cat, SessionScopeObject.state.hadALogout, true);
			}
			
			
		}
		catch (e) {
			logException(e);
			assertTrue("Exception running tests", cat, "false");
		}
	</tml:script>
	
	<tml:warnings/>
</body>
</html>