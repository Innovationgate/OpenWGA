<html>

<head><tml:htmlhead/></head>

<body>
	<PRE>
	Tests renderers
	</PRE>
	
	<hr>
	
	<tml:include ref="::theinclude" context="docid:jjar-5xeqld"/>
	
	<tml:include ref="::onlyrender" var="onlyrenderoutput"/>
	
	<tml:include ref="::onlyrenderreader" var="onlyrenderreaderoutput"/>
	
	<tml:include ref="::dispatchdefault" context="docid:jjar-5xeqld" var="dispatchdefaultoutput"/>
	
	<tml:include ref="::dispatchcustom" var="dispatchcustomoutput"/>
	
	<tml:include ref="::multirendering" var="dispatchmultioutput"/>
	
	<tml:button id="click1" clickaction="$mc.doIt" a-namedParam="'namedvalue'" param1="unnamedvalue">Test renderer method call</tml:button>
	
	<tml:item name="$mc.fetchIt" context="docid:jjar-5xeqld" var="rendererFetchedValue"/>
	<tml:item name="$mc.aField" var="rendererFetchedValue2"/>
	<tml:item name="$mc.getUtilSomething" var="rendererUtilObject"/>
	<tml:item name="$mc.fetchItWithParams" a-theParam="'thatValue'" var="rendererFetchedValue3"/>
	<tml:item name="$mc.getContentURL" var="isolatedContentURL"/>
	
	<tml:portlet name="foreign-design-db" designdb="test6" ref="v7_2_M2:renderers:renderers_include"/>
	
	<tml:script>
		function findCookie(name) {
			for each (c in request.getCookies()) {
				if (c.name==name) return c.value;
			}
			return null;
		}
		var clickStep = parseInt(findCookie("clickStep"));
		var cat = findCookie("testId");
		
		try {
			if (clickStep == 0) {
				assertEquals("Outer layout: Constructor ran", cat, prepareRan, "yes");
				assertEquals("Outer layout: Correct context", cat, prepareContext, this.path);
				assertEquals("Outer layout: Correct design context", cat, prepareDesignContext, "v7_2_m2:renderers:basic.controller");
				assertEquals("Include: Only render output", cat, onlyRenderOutput, "This is render output");
				assertEquals("Inlcude: Only render output, input from reader", cat, onlyrenderreaderoutput, "This is the textcontent of onlyrenderreader file.");
				assertEquals("Include: Dispatch Default: Render method ran", cat, dispatchDefaultRenderRan, "yes");
				assertEquals("Include: Dispatch Default: Dispatched, controller ran", cat, itemList("dispatchdefaultoutput"), ["This is dispatch default: Die Highlights - true","RenderEnd"]);
				assertEquals("Include: Dispatch Custom: Dispatched, controller ran", cat, itemList("dispatchcustomoutput"), ["This is dispatch custom target: WMS Live Demo - true"]);
				assertEquals("Include: Dispatch Multiply: Dispatched, controllers ran", cat, itemList("dispatchmultioutput"), ["This is dispatch custom target: WebGate Anywhere 3 - true","This is dispatch default: WebGate Anywhere 3 - true"]);
				assertEquals("Module Controller method: Call as item", cat, rendererFetchedValue, "fetchedValue:db:test5/docid:jjar-5xeqld.de.2");
				assertEquals("Module Controller field: Call as item", cat, rendererFetchedValue2, 2);
				assertEquals("Module Controller method: Fetch value from internally created util object", cat, rendererUtilObject, "better than nothing");
				assertEquals("Module Controller field: Call as item, use arguments", cat, rendererFetchedValue3, "fetchedValue:thatValue");
				assertEquals("Module Controller field: Call as item in include, choose the include renderer", cat, includeField, "A field in include Controller");
				assertEquals("Module Controller: WGA is isolated", cat, item("$mc.isWGAIsolated"), true);
				assertEquals("Module Controller: Injected context is isolated", cat, item("$mc.isCxIsolated"), true);
				assertEquals("Module Controller: Generate Content URL in isolated method", cat, isolatedContentURL, request.getContextPath() + "/test5/home/wilkommen_be_innovation_gate~owee-5aegzr.de.html");
			}
			else if (clickStep == 1) {
				assertEquals("Renderer method: Call as action", cat, controllerMethod, "namedvalue-unnamedvalue");
			}
		}
		catch (e) {
			logException(e);
			assertTrue("Exception running tests", cat, "false");
		}
	</tml:script>
	
	<tml:warnings/>
</body>
</html>