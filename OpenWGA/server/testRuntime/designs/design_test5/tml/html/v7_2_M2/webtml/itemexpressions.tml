<html>

<head><tml:htmlhead/></head>

<body>
	<PRE>
	Tests usage of new syntaxes valid in item expressions since 7.2
	</PRE>
	
	<hr>
	
	<tml:range var="booleanExp" if="true">yes</tml:range>
	<tml:range var="booleanExp2" if="$mc.someComplexObject.aBool">yes</tml:range>
	<tml:range var="booleanExp3" if="$mc.someComplexObject.aBool & $mc.someComplexObject.aNumber">yes</tml:range>
	<tml:range var="booleanExp4" if="$mc.someComplexObject.aBool & $mc.someComplexObject.aFalseBool">yes</tml:range>
	<tml:range var="booleanExp5" if="$mc.someComplexObject.aBool | $mc.someComplexObject.aFalseBool">yes</tml:range>
	<tml:range var="booleanExp6" if="$mc.someComplexObject.aFalseBool | $mc.someComplexObject.anEmptyString">yes</tml:range>
	<tml:range var="booleanExp7" if="$mc.someComplexObject.aString" if-equals="' The String '">yes</tml:range>
	<tml:range var="booleanExp8" if="$mc.someComplexObject.aString" if_equals=" The String ">yes</tml:range>
	<tml:range var="booleanExp8b" if="$mc.someComplexObject.aString" if_equals=" Another String ">yes</tml:range>
	<tml:range var="booleanExp9" if="$mc.someComplexObject.aString" if-equals="' The String ',' Another String '">yes</tml:range>
	<tml:range var="booleanExp10" if="$mc.someComplexObject.aString" if-equals="' Ye String ',' Another String '">yes</tml:range>
	<tml:range var="booleanExp11" if="$mc.someComplexObject.aString | $mc.someComplexObject.anotherString" if-equals="'Yet another String'">yes</tml:range>
	<tml:range var="booleanExp12" if="$mc.someComplexObject.aString | $mc.someComplexObject.anotherString" if-equals="'Totally different String'">yes</tml:range>
	
	<tml:range var="booleanExp13" if="$mc.someComplexObject.aString" if_equals=" The String ">yes</tml:range>
	<tml:range var="booleanExp14" if="$mc.someComplexObject.aString" if_equals=" Different String ">yes</tml:range>
	
	<tml:range var="booleanExp15" if="$mc.someComplexObject.aFive" if-equals="5">yes</tml:range>
	<tml:range var="booleanExp16" if="$mc.someComplexObject.aFive" if-equals="6">yes</tml:range>

	<tml:range var="booleanExp17" if="$mc.someComplexObject.aNull" if-equals="null">yes</tml:range>
	<tml:range var="booleanExp18" if="$mc.someComplexObject.aZero" if-equals="null">yes</tml:range>

	<tml:range var="booleanExp19" if="$mc.someComplexObject.aFivePointTwo" if-equals="5.2">yes</tml:range>
	<tml:range var="booleanExp20" if="$mc.someComplexObject.aFivePointTwo" if-equals="5.3">yes</tml:range>

	<tml:range var="booleanExp21" if="$mc.someComplexObject.notDefined" if-equals="undefined">yes</tml:range>
	<tml:range var="booleanExp22" if="$mc.someComplexObject.aNull" if-equals="undefined">yes</tml:range>
	
	<tml:range var="booleanExp23" if="$mc.someComplexObject.aString" if-in="' The String ',' Another String '">yes</tml:range>
	<tml:range var="booleanExp24" if="$mc.someComplexObject.aString" if-in="' Ye String ',' Another String '">yes</tml:range>
	
	<tml:range var="booleanExp25" if="$mc.someComplexObject.giveMeAnA" if-in="$mc.someComplexObject.aList1,$mc.someComplexObject.aList2">yes</tml:range>
	<tml:range var="booleanExp26" if="$mc.someComplexObject.giveMeAnF" if-in="$mc.someComplexObject.aList1,$mc.someComplexObject.aList2">yes</tml:range>
	
	<tml:range var="booleanExp27" if="$mc.someComplexObject.giveMeAnA" if-in="$mc.someComplexObject.anObject1,$mc.someComplexObject.anObject2">yes</tml:range>
	<tml:range var="booleanExp28" if="$mc.someComplexObject.giveMeAnF" if-in="$mc.someComplexObject.anObject1,$mc.someComplexObject.anObject2">yes</tml:range>
	
	
	
	
	
	
	<tml:script>
		setOption("thatoption", "thatvalue");
		setOption("optionObject", {myprop: "Yes!"});
	
	
		function findCookie(name) {
			for each (c in request.getCookies()) {
				if (c.name==name) return c.value;
			}
			return null;
		}
		var clickStep = parseInt(findCookie("clickStep"));
		var cat = findCookie("testId");
		
		try {
			assertEquals("Item expressions: Options", cat, item("$option_thatoption"), "thatvalue");
			assertEquals("Item expressions: Options/regular JS objects, chain calls via .", cat, item("$option_optionObject.myprop"), "Yes!");
			assertEquals("Item expressions: Options/regular JS objects, chain calls via ., native property", cat, item("$option_optionObject.myprop.length"), 4);
			assertEquals("Item expressions: Options/regular JS objects, chain calls via ., native method", cat, item("$option_optionObject.myprop.toUpperCase"), "YES!");
			assertEquals("Item expressions: String literals", cat, item("'abc'"), "abc");
			assertEquals("Item expressions: String literals with ' escaped", cat, item("'ab\'c'"), "ab\'c");
			assertEquals("Item expressions: String literals with \ at the end", cat, item("'abc\\'"), "abc\\");
			assertEquals("Item expressions: String literals with spaces", cat, item("'a b c'"), "a b c");
			assertEquals("Item expressions: String literals with dots (misinterpretation as call chain)", cat, item("'a.b.c'"), "a.b.c");
			assertEquals("Item expressions: number literals", cat, item("1"), 1);
			assertEquals("Item expressions: negative number literals", cat, item("-1"), -1);
			assertEquals("Item expressions: number literals with decimal part", cat, item("1.55"), 1.55);
			assertEquals("Item expressions: boolean literal true", cat, item("true"), true);
			assertEquals("Item expressions: boolean literal false", cat, item("false"), false);
			assertTrue("Item expressions: Module Controller", cat, "typeof(item('$mc')) == 'object'");
			assertTrue("Item expressions: Module Controller, Java object", cat, "item('$mc.someComplexObject.javaObject').build() == WGA.urlBuilder().build()");
			assertEquals("Item expressions: Module Controller, Java object, Java Method", cat, item("$mc.someComplexObject.javaObject.build"), WGA.urlBuilder().build());
			assertEquals("Item expressions: Module Controller, Java class", cat,  item("$mc.someComplexObject.javaClass"), Packages.de.innovationgate.utils.WGUtils);
			assertEquals("Item expressions: Module Controller, Java class, Java constant", cat,  item("$mc.someComplexObject.javaClass.DIRLINK_FILE"), Packages.de.innovationgate.utils.WGUtils.DIRLINK_FILE);
			assertEquals("Item expressions: Module Controller, Java class, Java static method", cat,  item("$mc.someComplexObject.javaClass.maxHeap"), WGA.Utils.getMaxHeap());
			assertEquals("Item expressions: Native String", cat,  item("$mc.someComplexObject.aString"), " The String ");
			assertEquals("Item expressions: Native String, native property", cat,  item("$mc.someComplexObject.aString.length"), 12);
			assertEquals("Item expressions: Native String, native method 1", cat,  item("$mc.someComplexObject.aString.toUpperCase"), " THE STRING ");
			assertEquals("Item expressions: Native String, native method 2", cat,  item("$mc.someComplexObject.aString.trim"), "The String");
			assertEquals("Item expressions: Native Number", cat,  item("$mc.someComplexObject.aNumber"), 1);
			assertEquals("Item expressions: Native Boolean", cat,  item("$mc.someComplexObject.aBool"), true);
			assertEquals("Item expressions: Date", cat,  item("$mc.someComplexObject.aDate"), WGA.parseDate("23.01.1954", "dd.MM.yyyy"));
			
			assertEquals("Item Conditions: Simple true", cat, booleanExp, "yes");
			assertEquals("Item Conditions: Simple bool field", cat, booleanExp2, "yes");
			assertEquals("Item Conditions: And operator true", cat, booleanExp3, "yes");
			assertNotEquals("Item Conditions: And operator false", cat, booleanExp4, "yes");
			assertEquals("Item Conditions: Or operator true", cat, booleanExp5, "yes");
			assertNotEquals("Item Conditions: Or operator false", cat, booleanExp6, "yes");
			assertEquals("Item Conditions: Compare to string", cat, booleanExp7, "yes");
			assertEquals("Item Conditions: Compare to string, constant expression true", cat, booleanExp8, "yes");
			assertNotEquals("Item Conditions: Compare to string, constant expression false", cat, booleanExp8b, "yes");
			assertEquals("Item Conditions: Compare to multiple strings true", cat, booleanExp9, "yes");
			assertNotEquals("Item Conditions: Compare to multiple strings false", cat, booleanExp10, "yes");
			assertEquals("Item Conditions: Comparing multiple items to one string true", cat, booleanExp11, "yes");
			assertNotEquals("Item Conditions: Comparing multiple items to one string false", cat, booleanExp12, "yes");
			assertEquals("Item Conditions: Comparing item to static string true", cat, booleanExp13, "yes");
			assertNotEquals("Item Conditions: Comparing Item to static string false", cat, booleanExp14, "yes");
			
			assertEquals("Item Conditions: Compare with number literal true", cat, booleanExp15, "yes");
			assertNotEquals("Item Conditions: Compare with number literal false", cat, booleanExp16, "yes");
			
			assertEquals("Item Conditions: Compare with null literal true", cat, booleanExp17, "yes");
			assertNotEquals("Item Conditions: Compare with null literal false", cat, booleanExp18, "yes");
			
			assertEquals("Item Conditions: Compare with number literal plus decimal point true", cat, booleanExp19, "yes");
			assertNotEquals("Item Conditions: Compare with number literal plus decimal point false", cat, booleanExp20, "yes");

			assertEquals("Item Conditions: Compare with undefined true", cat, booleanExp21, "yes");
			assertNotEquals("Item Conditions: Compare with undefined false", cat, booleanExp22, "yes");
			
			assertEquals("Item Conditions: If in comparison with commaseparated list of single values true", cat, booleanExp23, "yes");
			assertNotEquals("Item Conditions: If in comparison with commaseparated list of single values false", cat, booleanExp24, "yes");

			assertEquals("Item Conditions: If in comparison with commaseparated list of lists true", cat, booleanExp25, "yes");
			assertNotEquals("Item Conditions: If in comparison with commaseparated list of lists false", cat, booleanExp26, "yes");
			
			assertEquals("Item Conditions: If in comparison with commaseparated list of maps true", cat, booleanExp27, "yes");
			assertNotEquals("Item Conditions: If in comparison with commaseparated list of maps false", cat, booleanExp28, "yes");
			
		}
		catch (e) {
			logException(e);
			assertTrue("Exception running tests", cat, "false");
		}
	</tml:script>
	
	<tml:warnings/>
</body>
</html>