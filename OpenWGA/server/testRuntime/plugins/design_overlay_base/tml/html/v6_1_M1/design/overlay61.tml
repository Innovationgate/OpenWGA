<html>

<head><tml:htmlhead/></head>

<body>
	<PRE>
	Tests the improved overlay management in OpenWGA 6.1 (#00002093)
	Note: New actually means new in base version. Unchanged actually means, changed only in overlay. Changed means changed only in new base version. Conflict means changed in both.
	</PRE>
	
	<hr>
	
	<tml:include ref="overlay:v6_1:new" var="tmlnew"/>
	<tml:include ref="overlay:v6_1:unchanged" var="tmlunchanged"/>
	<tml:include ref="overlay:v6_1:changed" var="tmlchanged"/>
	<tml:include ref="overlay:v6_1:conflict" var="tmlconflict"/>
	
	<tml:script>
		var cat = "Design:Overlays";
		
		// Prepare sequence variable to be able to determine the request sequence number
		if (isdefined("seq")) {
			seq++;
		}
		else {
			setSessionVar("seq", 1);
		}
		
		try {
			var changed = db().getDesignProvider().getStatus().getChangedDocuments();
			var DocKey = Packages.de.innovationgate.webgate.api.WGDocumentKey;
			var ChangeType = Packages.de.innovationgate.wgpublisher.design.OverlayStatus.ChangeType;
			
			assertEquals("New WebTML module: Use base version", cat, tmlnew, "new-1.1.0");
			assertEquals("New WebTML module: Correct change detected", cat, changed.get(new DocKey("tml", "overlay:v6_1:new", "html")).getChangeType(), ChangeType.NEW);
			assertEquals("Unchanged WebTML module: Use overlay version", cat, tmlunchanged, "unchanged-1.0.0-overlay-modified");
			assertEquals("Unchanged WebTML module: No change detected", cat, changed.get(new DocKey("tml", "overlay:v6_1:unchanged", "html")), null);
			assertEquals("Changed WebTML module: Use new base version", cat, tmlchanged, "changed-1.1.0");
			assertEquals("Changed WebTML module: Correct change detected", cat, changed.get(new DocKey("tml", "overlay:v6_1:changed", "html")).getChangeType(), ChangeType.CHANGED);
			assertEquals("Conflict WebTML module: Use overlay version", cat, tmlconflict, "conflict-1.0.0-overlay-modified");
			assertEquals("Conflict WebTML module: Correct change detected", cat, changed.get(new DocKey("tml", "overlay:v6_1:conflict", "html")).getChangeType(), ChangeType.CONFLICT);
			
			assertEquals("New script module: Use base version", cat, callAction("overlay:v6_1:new"), "new-1.1.0");
			assertEquals("New script module: Correct change detected", cat, changed.get(new DocKey("cssjs", "overlay:v6_1:new", "tmlscript")).getChangeType(), ChangeType.NEW);
			assertEquals("Unchanged script module: Use overlay version", cat, callAction("overlay:v6_1:unchanged"), "unchanged-1.0.0-overlay-modified");
			assertEquals("Unchanged script module: No change detected", cat, changed.get(new DocKey("cssjs", "overlay:v6_1:unchanged", "tmlscript")), null);
			assertEquals("Changed script module: Use new base version", cat, callAction("overlay:v6_1:changed"), "changed-1.1.0");
			assertEquals("Changed script module: Correct change detected", cat, changed.get(new DocKey("cssjs", "overlay:v6_1:changed", "tmlscript")).getChangeType(), ChangeType.CHANGED);
			assertEquals("Conflict script module: Use overlay version", cat, callAction("overlay:v6_1:conflict"), "conflict-1.0.0-overlay-modified");
			assertEquals("Conflict script module: Correct change detected", cat, changed.get(new DocKey("cssjs", "overlay:v6_1:conflict", "tmlscript")).getChangeType(), ChangeType.CONFLICT);
			
			assertEqualLists("New file container: Use base version", cat, db().getFileContainer("overlay:v6_1:new").getFileNames(), ["new-1.1.0.txt"]);
			assertEquals("New file container: Correct change detected", cat, changed.get(new DocKey("filecontainer", "overlay:v6_1:new", null)).getChangeType(), ChangeType.NEW);
			assertEqualLists("Unchanged file container: Use overlay version", cat, db().getFileContainer("overlay:v6_1:unchanged").getFileNames(), ["unchanged-1.0.0-overlay-modified.txt"]);
			assertEquals("Unchanged file container: No change detected", cat, changed.get(new DocKey("filecontainer", "overlay:v6_1:unchanged", null)), null);
			assertEqualLists("Changed file container - added base file: Use new base version", cat, db().getFileContainer("overlay:v6_1:changed-added").getFileNames(), ["changed-1.1.0.txt","changed-1.0.0.txt"]);
			assertEquals("Changed file container - added base file: Correct change detected", cat, changed.get(new DocKey("filecontainer", "overlay:v6_1:changed-added", null)).getChangeType(), ChangeType.CHANGED);
			assertEqualLists("Changed file container - deleted base file: Use new base version", cat, db().getFileContainer("overlay:v6_1:changed-deleted").getFileNames(), ["otherone.txt"]);
			assertEquals("Changed file container - deleted base file: Correct change detected", cat, changed.get(new DocKey("filecontainer", "overlay:v6_1:changed-deleted", null)).getChangeType(), ChangeType.CHANGED);
			assertEqualLists("Changed file container - modified base file: Use new base version (file names)", cat, db().getFileContainer("overlay:v6_1:changed-modified").getFileNames(), ["changed-1.0.0.txt"]);
			assertEquals("Changed file container - modified base file: Correct change detected", cat, changed.get(new DocKey("filecontainer", "overlay:v6_1:changed-modified", null)).getChangeType(), ChangeType.CHANGED);
			var changedHash = WGA.Utils.toHexString(Packages.de.innovationgate.utils.MD5HashingInputStream.getStreamHashBytes(db().getFileContainer("overlay:v6_1:changed-modified").getFileData("changed-1.0.0.txt")));
			assertEquals("Changed file container - modified base file: use new base version (file contents)", cat, changedHash, "646eed1d291edbeda35f754bf8f09cfd");
			
			assertEqualLists("Conflict file container - added overlay file: Use overlay version", cat, db().getFileContainer("overlay:v6_1:conflict-added").getFileNames(), ["conflict-1.0.0.txt","new-overlay-file.txt"]);
			assertEquals("Conflict file container - added overlay file: Correct change detected", cat, changed.get(new DocKey("filecontainer", "overlay:v6_1:conflict-added", null)).getChangeType(), ChangeType.CONFLICT);
			assertEqualLists("Conflict file container - deleted overlay file: Use overlay version", cat, db().getFileContainer("overlay:v6_1:conflict-deleted").getFileNames(), ["conflict-1.0.0.txt"]);
			assertEquals("Conflict file container - deleted overlay file: Correct change detected", cat, changed.get(new DocKey("filecontainer", "overlay:v6_1:conflict-deleted", null)).getChangeType(), ChangeType.CONFLICT);
			assertEqualLists("Conflict file container - modified overlay file: Use overlay version (file names)", cat, db().getFileContainer("overlay:v6_1:conflict-modified").getFileNames(), ["conflict-1.0.0.txt"]);
			assertEquals("Conflict file container - modified overlay file: Correct change detected", cat, changed.get(new DocKey("filecontainer", "overlay:v6_1:conflict-modified", null)).getChangeType(), ChangeType.CONFLICT);
			var conflictHash = WGA.Utils.toHexString(Packages.de.innovationgate.utils.MD5HashingInputStream.getStreamHashBytes(db().getFileContainer("overlay:v6_1:conflict-modified").getFileData("conflict-1.0.0.txt")));
			assertEquals("Conflict file container - modified file: use overlay version (file contents)", cat, conflictHash, "6d61e3e638df4919f6cc1a720aecd3b4");
			
			
			
			function findResourceOfKey(list, docKey) {
			
				for (doc in Iterator(list)) {
					
					if (doc.documentKey == docKey) {
						return doc;
					}
					
				}
				
				return null;
			
			}
			
			var tmls = db().getTMLModules();
			
			var theTml = findResourceOfKey(tmls, "tml/overlay:v6_1:new/html");
			assertTrue("Design object list contains new resource: tml", cat, theTml != null ? "true" : "false");
			assertTrue("Design object list: Is original resource from base: new tml", cat, theTml.core.isOverlay() ? "false" : "true");
			
			theTml = findResourceOfKey(tmls, "tml/overlay:v6_1:unchanged/html");
			assertTrue("Design object list contains unchanged resource: tml", cat, theTml != null ? "true" : "false");
			assertTrue("Design object list: Is wrapped resource from overlay: unchanged tml", cat, theTml.core.isOverlay() ? "true" : "false");
			
			theTml = findResourceOfKey(tmls, "tml/overlay:v6_1:changed/html");
			assertTrue("Design object list contains changed resource: tml", cat, theTml != null ? "true" : "false");
			assertTrue("Design object list: Is original resource from base: changed tml", cat, theTml.core.isOverlay() ? "false" : "true");
			
			theTml = findResourceOfKey(tmls, "tml/overlay:v6_1:conflict/html");
			assertTrue("Design object list contains conflict resource: tml", cat, theTml != null ? "true" : "false");
			assertTrue("Design object list: Is wrapped resource from overlay: conflict tml", cat, theTml.core.isOverlay() ? "true" : "false");
			
			var scripts = db().getScriptModules();
			
			var theScript = findResourceOfKey(scripts, "cssjs/overlay:v6_1:new/tmlscript");
			assertTrue("Design object list contains new resource: script", cat, theScript != null ? "true" : "false");
			assertTrue("Design object list: Is original resource from base: new script", cat, theScript.core.isOverlay() ? "false" : "true");
			
			theScript = findResourceOfKey(scripts, "cssjs/overlay:v6_1:unchanged/tmlscript");
			assertTrue("Design object list contains unchanged resource: script", cat, theScript != null ? "true" : "false");
			assertTrue("Design object list: Is wrapped resource from overlay: unchanged script", cat, theScript.core.isOverlay() ? "true" : "false");
			
			theScript = findResourceOfKey(scripts, "cssjs/overlay:v6_1:changed/tmlscript");
			assertTrue("Design object list contains changed resource: script", cat, theScript != null ? "true" : "false");
			assertTrue("Design object list: Is original resource from base: changed script", cat, theScript.core.isOverlay() ? "false" : "true");
			
			theScript = findResourceOfKey(scripts, "cssjs/overlay:v6_1:conflict/tmlscript");
			assertTrue("Design object list contains unchanged resource: conflict", cat, theScript != null ? "true" : "false");
			assertTrue("Design object list: Is wrapped resource from overlay: conflict script", cat, theScript.core.isOverlay() ? "true" : "false");
			
			var fcs = db().getFileContainers();
			
			var theFC = findResourceOfKey(fcs, "filecontainer/overlay:v6_1:new"); 
			assertTrue("Design object list contains new resource: fc", cat, theFC != null ? "true" : "false");
			assertTrue("Design object list: Is original resource from base: new fc", cat, theFC.core.isOverlay() ? "false" : "true");

			theFC = findResourceOfKey(fcs, "filecontainer/overlay:v6_1:unchanged"); 
			assertTrue("Design object list contains unchanged resource: fc", cat, theFC != null ? "true" : "false");
			assertTrue("Design object list: Is wrapped resource from overlay: new fc", cat, theFC.core.isOverlay() ? "true" : "false");
			
			var theFC = findResourceOfKey(fcs, "filecontainer/overlay:v6_1:changed-added"); 
			assertTrue("Design object list contains changed-added resource: fc", cat, theFC != null ? "true" : "false");
			assertTrue("Design object list: Is original resource from base: changed-added fc", cat, theFC.core.isOverlay() ? "false" : "true");

			var theFC = findResourceOfKey(fcs, "filecontainer/overlay:v6_1:changed-deleted"); 
			assertTrue("Design object list contains changed-deleted resource: fc", cat, theFC != null ? "true" : "false");
			assertTrue("Design object list: Is original resource from base: changed-deleted fc", cat, theFC.core.isOverlay() ? "false" : "true");
			
			var theFC = findResourceOfKey(fcs, "filecontainer/overlay:v6_1:changed-modified"); 
			assertTrue("Design object list contains changed-modified resource: fc", cat, theFC != null ? "true" : "false");
			assertTrue("Design object list: Is original resource from base: changed-modified fc", cat, theFC.core.isOverlay() ? "false" : "true");

			var theFC = findResourceOfKey(fcs, "filecontainer/overlay:v6_1:conflict-added"); 
			assertTrue("Design object list contains conflict-added resource: fc", cat, theFC != null ? "true" : "false");
			assertTrue("Design object list: Is wrapped resource from overlay: conflict-added fc", cat, theFC.core.isOverlay() ? "true" : "false");

			var theFC = findResourceOfKey(fcs, "filecontainer/overlay:v6_1:conflict-deleted"); 
			assertTrue("Design object list contains conflict-deleted resource: fc", cat, theFC != null ? "true" : "false");
			assertTrue("Design object list: Is wrapped resource from overlay: conflict-deleted fc", cat, theFC.core.isOverlay() ? "true" : "false");
			
			var theFC = findResourceOfKey(fcs, "filecontainer/overlay:v6_1:conflict-modified"); 
			assertTrue("Design object list contains conflict-modified resource: fc", cat, theFC != null ? "true" : "false");
			assertTrue("Design object list: Is wrapped resource from overlay: conflict-modified fc", cat, theFC.core.isOverlay() ? "true" : "false");
			
			
			
		}
		catch (e) {
			logException(e);
			assertTrue("Exception running tests", cat, "false");
		}
	</tml:script>
	
	<tml:warnings/>
</body>
</html>