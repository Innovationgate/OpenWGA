<html>

<head><tml:htmlhead/></head>

<body>
	<PRE>
	Tests special behaviours in overlay designs
	</PRE>
	
	<hr>
	<tml:include ref="overlay:basictests"/>
	
	
	<tml:script>
		var cat = "WebTML:Overlays";
		
		// Prepare sequence variable to be able to determine the request sequence number
		if (isdefined("seq")) {
			seq++;
		}
		else {
			setSessionVar("seq", 1);
		}
		
		try {
			if (seq == 1) {
				runtime.debug();
				assertEquals("Normal WebTML Include inside overlay references overlay resource", cat, overlayInclude, "overlayIncludedModuleRan");
				assertEquals("WebTML Include with @base inside overlay references base resource", cat, baseInclude, "baseIncludedModuleRan");
				assertEquals("External WebTML Include inside overlay references external resource without prefix", cat, externalInclude, "externalIncludeModuleRan");
				assertEquals("WebTML Include with modified overlay references the overlay version", cat, modifiedInclude, "modifiedModuleIncluded");
				
				assertTrue("WebTML Portlet inside overlay references overlay resource", cat, "/^<script.*<\\/script>overlayIncludedModuleRan$/g.test(overlayPortlet)");
				assertTrue("WebTML Portlet with @base inside overlay references base resource", cat, "/^<script.*<\\/script>baseIncludedModuleRan$/g.test(basePortlet)");
				
				assertEquals("Normal file URL inside overlay references overlay resource", cat, overlayFile, request.getContextPath() + "/overlaytest/file/overlay/images/header-background.jpg");
				assertEquals("File URL with @base inside overlay references base resource", cat, baseFile, request.getContextPath() + "/overlaytest/file/images/header-background.jpg");
				assertEquals("External File URL inside overlay references external resource without prefix", cat, externalFile, request.getContextPath() + "/test1/file/help/edit.gif");
				
				var fileContents = WGA.Utils.readString(db().getFileContainer("overlay:files").getFileText("test.txt"));
				assertEquals("File container file with modified overlay uses the overlay version", cat, fileContents, "modifiedFileRead");
				
				assertEquals("Normal script URL inside overlay references overlay resource", cat, overlayScript, request.getContextPath() + "/overlaytest/css/overlay:basic");
				assertEquals("Script URL with @base inside overlay references base resource", cat, baseScript, request.getContextPath() + "/overlaytest/css/basic");
				assertEquals("External Script URL inside overlay references external resource without prefix", cat, externalScript, request.getContextPath() + "/test1/css/wga3demo");
				
				var xmlContents = db().getScriptModule("overlay:test", "xml").getDOMDocument();
				assertEquals("Script module with modified overlay uses the overlay version", cat, xmlContents.getRootElement().attributeValue("version"), "modified");
				
				assertEquals("Normal label inside overlay references overlay label", cat, overlayLabel, "OverlayLabel");
				assertEquals("Label with @base inside overlay references base label", cat, baseLabel, "BaseLabel");
				
				mediaKey = WGA.Core.getMediaKey("overlay");
				assertTrue("Media key, defined in overlay config, is active", cat, "mediaKey != null");
				assertEquals("Media key, defined in overlay config, is correctly configured", cat, mediaKey.getMimeType(), "text/plain");
				
				assertEquals("App shortcut, defined in overlay config, is active", cat, overlayAppShortcut, request.getContextPath() + "/plugin-wga-app-framework/file/icons/accept.png");
				
				assertEquals("Overlay connect script ran and uses overlay addressation", cat, OverlayGlobal.getInfo(), "Worked!");
				
				assertEquals("Overlay object code uses overlay addressation", cat, OverlayGlobal.getOverlayAction(), "overlayActionRan");
				
				var jodaDate = Packages.org.joda.time.LocalDate();
				assertEquals("JAR from overlay design is in classpath", cat, jodaDate.getYear(), WGA.createCalendar(WGA.createDate()).get(java.util.Calendar.YEAR)); 
				
			}
			else if (seq == 2) {
				assertEquals("Default action can be referenced from within overlay", cat, defaultActionCalled, "true"); 
			}
			else if (seq == 3) {
				assertEquals("Page-defined action can be referenced from within overlay", cat, pageActionCalled, "true");
				assertEquals("Page-defined action can be called within TMLScript from within overlay", cat, innerPageActionCalled, "true");
			}
			
		}
		catch (e) {
			logException(e);
			assertTrue("Exception running tests", cat, "false");
		}
	</tml:script>
	
	<tml:warnings/>
</body>
</html>