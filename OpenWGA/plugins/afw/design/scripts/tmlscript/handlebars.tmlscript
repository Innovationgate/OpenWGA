var Handlebars;
var self;

this.init = function(){
	self=this;
	if(!require)
		return;

	try{
		Handlebars = require("handlebars-v2.0.0")
		Handlebars.registerHelper({
		
			foreach: function(obj, options){
				var ret = ""
				for(let doc in Iterator(obj)){
					ret += options.fn(doc)
				}
				return ret;
			},

			json: function(obj, options){
				var data = JSON.parse(obj);
				return options.fn(data)
			},
			
			context: function(ctx, options){
				if(typeof(ctx)=="string" || (ctx instanceof Packages.de.innovationgate.wgpublisher.webtml.utils.TMLContext)){
					var doc = context(ctx, false)
					if(!doc){
						log.error("#context: context '" + ctx + "' is invalid")
						return;
					}
					else return options.fn(doc)
				}
				else{
					log.error("#context: context expression can't be interpreted: " + ctx)
					return;
				}
			},

			encode: function(encoder, options){
				var txt = options.fn(this)
				return WGA.encode(encoder, txt)
			},
		
			nav: function(obj, options){
				var resultset = WGA.nav(this)[obj](options.hash)
				var ret = ""
				for(let doc in Iterator(resultset)){
					ret += options.fn(doc)
				}
				return ret;
			},
		
			meta: function(type, metaname){
				if(this instanceof Packages.de.innovationgate.wgpublisher.webtml.utils.TMLContext)
					return this.meta(type, metaname);
				else return "";
			},
		
			url: function(ctx, options){
				var url;
				if(ctx instanceof Packages.de.innovationgate.wgpublisher.webtml.utils.TMLContext)
					url = WGA.urlBuilder(ctx)
				else if(this instanceof Packages.de.innovationgate.wgpublisher.webtml.utils.TMLContext)
					url = WGA.urlBuilder(this)
				else url = WGA.urlBuilder(this.url)
				
				if(!options)
					options=ctx;
					
				if(options && options.hash){
					for(let [key, value] in options.hash){
						url.setParameter(key, value);
					}
				}
				return url.build(true);
			},
			
			files: function(filename, options){
			
				if(!(this instanceof Packages.de.innovationgate.wgpublisher.webtml.utils.TMLContext)){
					return "helper 'files' called outside TMLContext"
				}
			
				var ret = ""
				var filenames = WGA.createList();
				if(typeof(filename)=="string")
					filenames.add(filename);
				else {
					filenames.addAll(this.content().getFileNames())
					options = filename;
				}
				
				for(var filename in Iterator(filenames)){
					var file_md = this.content().getFileMetaData(filename);
					ret += options.fn({
						name: filename,
						size: this.content().getFileSize(filename),
						url: WGA.urlBuilder(this.fileurl(filename)).build(true),
						meta: file_md
					})
				}
				return ret;
			},
			
			format: function(obj, format){
				return WGA.format(obj, format);
			},
			
			include: function(ref, options){
				if(!options)
					options=ref;
				if(options && options.hash && options.hash.ref)
					ref=options.hash.ref
				var ret = self.resourceTemplate(ref, this)
				return new Handlebars.SafeString(ret);
			}
		
		})
		
	}
	catch(e){
		logException(e);
	}
}

this.registerHelper = function(cmd, f){
	Handlebars.registerHelper(cmd, f)
}

this.stringTemplate = function(input, data){
	if(!Handlebars)
		throw "Handlebars not available";
	var template = Handlebars.compile(input)
	try{
		return template(data);	
	}
	catch(e){
		log.error("Error processing Handlebars template:\n" + e.message);
	}
}

this.fileTemplate = function(container, file, data){

	if(!Handlebars)
		throw "Handlebars not available";
	
	var c = container; 
	if(typeof(container)=="string"){
		c = db().getFileContainer(container)
	}
	if(!c)
		throw "file container " + container + " not found."
	var f = c.getFileData(file)
	if(!f)
		throw "File " + file + " not found in container " + container;
	var filereader = new java.io.InputStreamReader(f, "UTF-8");
	if(!filereader)
		throw "Unable to open file " + file + " in container " + container;

	var filetext = WGA.Utils.readString(filereader) 
	filereader.close();

	var template = Handlebars.compile(filetext)
	try{
		return template(data);
	}
	catch(e){
		log.error("Error processing Handlebars template '" + file + "':\n" + e.message);
	}
}

this.resourceTemplate = function(resource, data){

	var ResourceRef = Packages.de.innovationgate.wga.additional_script_langs.ResourceRef;
	var ref = new ResourceRef(resource);

	if(ref.getDesignDocument()==null)
		throw "Design container not found: " + ref.toString()

	var template = Handlebars.compile(ref.getCode())
	try{
		return template(data);
	}
	catch(e){
		log.error("Error processing Handlebars template " + ref + ":\n" + e.message);
	}
	
}
