function Controller() {}

// Vererbung
Controller.prototype = Object.create($.dialogs.StructList.prototype);

Controller.prototype.prepare = function(App, $cx, $item__CM_clipboard_context) {

	var areas = WGA.List();
	var systemAreas = WGA.List();
	for(let area in Iterator(App.getAllowedAreas($cx.db().getDbReference()))){
		if(area.name=="$templates")
			systemAreas.add("Seitenvorlagen|" + area.name)
		else areas.add(area.name)
	}
	areas.addAll(systemAreas)

	var root_or_child = ["unter Seite '" + $cx.TITLE + "'|child"];
	if(areas.size())
		root_or_child.push("Als Hauptseite|root")

	return {
		$options: {
			root_or_child: root_or_child,
			areas: areas
		}
	}

}

Controller.prototype.pageType = function($cx, $item__CM_clipboard_context) {
	var source = $cx.context($item__CM_clipboard_context);
	return source.CONTENTTYPE;
}

Controller.prototype.isAllowedPageType = function(AFW, $cx, $item__CM_clipboard_context, $field_root_or_child, $field_area) {
	
	var source = $cx.context($item__CM_clipboard_context);
	var dest = $cx.document instanceof Packages.de.innovationgate.webgate.api.WGStructEntry ? $cx.document : $cx.content().structEntry;

	var Contenttype = AFW.contenttype(source.CONTENTTYPE);

	if(!Contenttype.isValid()){
		return false;
	}

	if($field_root_or_child=="root"){
		var area = $field_area || $cx.AREA
		dest = $cx.db().getArea(area)
	}
	else if(dest.getArea().name=="$trash-cm-neo"){
		return false;	
	}
	
	if(!Contenttype.isAllowed(dest)){
		return false;
	}
	return true;
}

Controller.prototype.isDestChildrenOfSource = function($cx, $item__CM_clipboard_context){
	var source = $cx.context($item__CM_clipboard_context);
	source = source.document instanceof Packages.de.innovationgate.webgate.api.WGStructEntry ? source.document : source.content().structEntry;
	var dest = $cx.document instanceof Packages.de.innovationgate.webgate.api.WGStructEntry ? $cx.document : $cx.content().structEntry;

	// is dest child of source?
	var s=dest;
	while(s!=null){
		if(s==source)
			return true;
		s=s.getParentEntry()
	}
	return false;
}

Controller.prototype.destinationChildren = function($cx, $form){
	if($form.root_or_child=="root"){
		return $cx.db().getArea($form.area).getRootEntries()
	}
	else{
		var dest = $cx.document instanceof Packages.de.innovationgate.webgate.api.WGStructEntry ? $cx.document : $cx.content().structEntry;
		return dest.getChildEntries();
	}
} 

Controller.prototype.copyPages = function(AFW, $cx, $item__CM_clipboard_context, $form) {
	
	var source = $cx.context($item__CM_clipboard_context);
	source = source.document instanceof Packages.de.innovationgate.webgate.api.WGStructEntry ? source.document : source.content().structEntry;
	
	var contenttype = source.getContentType().getName();
	
	if(source.getAllReleasedContent().isEmpty()){
		$form.addMessage("Die Quellseite enthält keine freigegebenen Inhaltsversionen und kann daher nicht eingefügt werden.");
		return;
	}
	
	var dest = $cx.document instanceof Packages.de.innovationgate.webgate.api.WGStructEntry ? $cx.document : $cx.content().structEntry;
	
	if($form.root_or_child=="root"){
		// #00005454
		dest = $cx.db().getArea($form.area)
	}

	var errorCreatingSubPages=false;

	try{
		var struct = copyStruct(source, dest, $form.recursive, $form.publish, $form.position)
		if(struct){
			if($form.position){
				var children; 
				if(dest instanceof Packages.de.innovationgate.webgate.api.WGArea)
					children = dest.getRootEntries();
				else children = dest.getChildEntries();
				
				if(children.size()>0){
					var position = this.preparePosition(dest.getDatabase(), children, $form.position)
					struct.setPosition(position);
					struct.save();
				}
			}
					
			var url;
			try{
				url = $cx.context("docid:"+struct.structKey).contenturl()
			}
			catch(e){}
			if(errorCreatingSubPages){
				return {
					"$vars": {
						_error: "Die Seite in der Ablage wurde dupliziert, aber einige der Unterseiten und/oder Sprachversionen konnten aufgrund Ihrer Berechtigung nicht erzeugt werden.",
						_redirectto: url
					}
				}
			}
			else return {
				"$portletEvents": {
					"close-dialog": {
						redirectto: url
					}
				},
				"$vars": {
					_dialog_closed: true
				}
			}
		}
		else {
			return {
				"$vars": {
					_error: "Die Seite in der Ablage konnte aufgrund Ihrer Berechtigung nicht dupliziert werden."
						+ "\nErstellen Sie statt dessen eine neue Seite vom Seitentyp '" + contenttype + "' und fügen aus der Ablage die Inhaltselemente in die neue Seite ein."
				}
			}
		}
	}
	catch(e){
		$form.addMessage(e.message);
		logException(e);
	}

	function copyStruct(source, dest, recursive, publish){
		//console.log("copy", source.title, "to", dest.title || dest.name, recursive, publish)

		var Contenttype = AFW.contenttype(source.getContentType().name);
		var ct = Contenttype.WGObject;

		if(!Contenttype.isValid()) throw{
			message: "Seitentyp nicht gefunden"
		}

		if(!Contenttype.isAllowed(dest)) throw{
			message: "Seitentyp nicht erlaubt"
		}
		
		// copy struct
		var struct;
		
		if(dest instanceof Packages.de.innovationgate.webgate.api.WGArea)
			struct = dest.createRootEntry(ct, source.getTitle())
		else struct = dest.createChildEntry(ct, source.getTitle())
		
		struct.setReaders(source.getReaders())
		struct.setChildEditors(source.getChildEditors())
		struct.setPageEditors(source.getPageEditors())

		// workflow:
		struct.setBranchWorkflow(source.getBranchWorkflow())
		
		// extension data
		for(let name in Iterator(source.getExtensionDataNames())){
			source.mayPushExtData(name) && struct.writeExtensionData(name, source.getExtensionData(name));
		}

		struct.save();
		
		// copy contents
		var docs=source.getAllReleasedContent().values();
		var contentsCreated = false;
		for(let doc in Iterator(docs)){
		
			var lang = doc.getLanguage().name;
			// check if language exists
			if(!dest.getDatabase().getLanguages().containsKey(lang)){
				console.log("Langauge not found. Content will be ignored", lang);
				continue;
			}
			
			try{
				var newdoc = struct.createContent(lang, doc.title);
				contentsCreated = true;
				
				// copy all items
				var Content = AFW.content(newdoc);
	
				Content.copyItems(doc);
				Content.copyMetas(doc);
				Content.copyModules(doc);
				Content.copyAttachments(doc)
	
				newdoc.save();
	
				if(publish && doc.status==doc.STATUS_RELEASE){
					newdoc.publish("copied from " + doc.title);
				}
			}
			catch(e){
				errorCreatingSubPages=true;
				console.error("PASTE: Unable to create content version", doc.title, "in language", lang, e.message);
				//logException(e);
			}
		}
		
		if(contentsCreated){
			if(recursive){
				var children=source.getChildEntries();
				for(let child in Iterator(children)){
					if(!copyStruct(child, struct, recursive, publish))
						errorCreatingSubPages=true;
				}	
	
			}
			return struct;
		}
		else{
			WGA.Master.runFunction(function(struct){
				struct.remove();
			}, struct)			
			return null;
		}
	}
	
}
