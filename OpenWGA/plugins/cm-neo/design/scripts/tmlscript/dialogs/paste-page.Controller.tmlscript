function Controller() {}

Controller.prototype.prepare = function($cx) {

	/*
	 * The following code needs wga 7.6 to work.
	 * this bc. $cx is not correctly initialised in ajax portlet requests
	 */ 

	// Areas
	var areas = WGA.createList()
	var systemAreas = WGA.createList()
	for(let area in Iterator($cx.db().getAreas().values())){
		if(area.name=="$templates"){
			if(!WGA.app($cx).isChiefEditor())				
				continue
		}
		else if(area.systemArea)
			continue;
		if(area.name=="hdb-content" && !WGA.app($cx).isManager())
			continue;
		var visiblefor = area.getExtensionData("CM_area_visible")
		if(visiblefor && visiblefor.size() && !$cx.db().isMemberOfUserList(visiblefor))
			continue;
		if(!area.mayEditPages())
			continue;
		if(area.mayReadContent()){
			if(area.name=="$templates")
				systemAreas.add("Seitenvorlagen|" + area.name)
			else areas.add(area.name)
		}
	}
	areas.addAll(systemAreas)

	return {
		$options: {
			root_or_child: [
				"unter Seite '" + $cx.TITLE + "'|child",
				"Als Hauptseite|root"
			],
			areas: areas
		}
	}

}

Controller.prototype.pageType = function($cx, $item__CM_clipboard_context) {
	var source = $cx.context($item__CM_clipboard_context);
	return source.CONTENTTYPE;
}

Controller.prototype.isAllowedPageType = function(AFW, $cx, $item__CM_clipboard_context, $field_root_or_child, $field_area) {
	
	var source = $cx.context($item__CM_clipboard_context);
	var dest = $cx.document instanceof Packages.de.innovationgate.webgate.api.WGStructEntry ? $cx.document : $cx.content().structEntry;

	var Contenttype = AFW.contenttype(source.CONTENTTYPE);

	if(!Contenttype.isValid()){
		return false;
	}

	if($field_root_or_child=="root"){
		var area = $field_area || $cx.AREA
		dest = $cx.db().getArea(area)
	}
	
	if(!Contenttype.isAllowed(dest)){
		return false;
	}
	return true;
}

Controller.prototype.destinationHasChildren = function($cx, $form){
	if($form.root_or_child=="root"){
		var dest = $cx.db().getArea($form.area)
		return dest.getRootEntries().size() > 0;
	}
	else{
		var dest = $cx.document instanceof Packages.de.innovationgate.webgate.api.WGStructEntry ? $cx.document : $cx.content().structEntry;
		return dest.hasChildren();
	}
} 

Controller.prototype.copyPages = function(AFW, $cx, $item__CM_clipboard_context, $form) {
	
	var source = $cx.context($item__CM_clipboard_context);
	source = source.document instanceof Packages.de.innovationgate.webgate.api.WGStructEntry ? source.document : source.content().structEntry;
	
	if(source.getAllReleasedContent().isEmpty()){
		$form.addMessage("Die Quellseite enthält keine freigegebenen Inhaltsversionen und kann daher nicht eingefügt werden.");
		return;
	}
	
	var dest = $cx.document instanceof Packages.de.innovationgate.webgate.api.WGStructEntry ? $cx.document : $cx.content().structEntry;
	
	if($form.root_or_child=="root"){
		// #00005454
		dest = $cx.db().getArea($form.area)
	}

	try{
		var struct = copyStruct(source, dest, $form.recursive, $form.publish, $form.position)
		var url;
		try{
			url = $cx.context("docid:"+struct.structKey).contenturl()
		}
		catch(e){}
		var ret = {
			"$portletEvents": {
				"close-dialog": {}
			},
			"$vars": {
				_dialog_closed: true
			}
		}
		if(url)
			ret["$portletEvents"]["close-dialog"] = {
				redirectto: url
			}
		return ret; 
	}
	catch(e){
		$form.addMessage(e.message);
		logException(e);
	}

	function copyStruct(source, dest, recursive, publish, position){
		//console.log("copy", source.title, "to", dest.title || dest.name, recursive, publish)

		var Contenttype = AFW.contenttype(source.getContentType().name);
		var ct = Contenttype.WGObject;

		if(!Contenttype.isValid()) throw{
			message: "Seitentyp nicht gefunden"
		}

		if(!Contenttype.isAllowed(dest)) throw{
			message: "Seitentyp nicht erlaubt"
		}
		
		// copy struct
		var struct;
		
		if(dest instanceof Packages.de.innovationgate.webgate.api.WGArea)
			struct = dest.createRootEntry(ct, source.getTitle())
		else struct = dest.createChildEntry(ct, source.getTitle())
		
		struct.setReaders(source.getReaders())
		struct.setPageEditors(source.getPageEditors())
		
		if(position){
			if(dest instanceof Packages.de.innovationgate.webgate.api.WGArea){
				var rootEntries = dest.getRootEntries();
				if(rootEntries.size()){
					if(position=="end")
						struct.setPosition(rootEntries.getByIndex(rootEntries.size()-1).getPosition()+100);	// APPEND TO END
					else struct.setPosition(rootEntries.getByIndex(0).getPosition()-100);	// APPEND TO START
				}
			}
			else if(dest.hasChildren()){
				var children = dest.getChildEntries();
				if(position=="end")
					struct.setPosition(children.getByIndex(children.size()-1).getPosition()+100);	// APPEND TO END
				else struct.setPosition(children.getByIndex(0).getPosition()-100);	// APPEND TO START
			}
		}
		else struct.setPosition(source.getPosition());	// default
		
		struct.save();
		
		// copy contents
		var docs=source.getAllReleasedContent().values();
		for(let doc in Iterator(docs)){
		
			var lang = doc.getLanguage().name;
			// check if language exists
			if(!dest.getDatabase().getLanguages().containsKey(lang)){
				console.log("Langauge not found. Content will be ignored", lang);
				continue;
			}
			
			var newdoc = struct.createContent(lang, doc.title);

			// copy all items
			var Content = AFW.content(newdoc);

			Content.copyItems(doc);
			Content.copyMetas(doc);
			Content.copyModules(doc);
			Content.copyAttachments(doc)

			newdoc.save();

			if(publish && doc.status==doc.STATUS_RELEASE){
				newdoc.publish("copied from " + doc.title);
			}
		}
		
		if(recursive){
			var children=source.getChildEntries();
			for(let child in Iterator(children)){
				copyStruct(child, struct, recursive, publish);
			}	

		}
		
		return struct;
	}
}
