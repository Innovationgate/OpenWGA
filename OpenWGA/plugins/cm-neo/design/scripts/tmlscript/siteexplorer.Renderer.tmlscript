function Renderer() {}

Renderer.prototype.render = function(App, $urlParam_id, $urlParam_dbkey, $urlParam_area, $urlParam_language) {

	var ret = []

	var structs = WGA.createList()

	function getRootEntries(areaname){
		var structs = WGA.createList();
		var area = db($urlParam_dbkey).getArea(areaname);
		if(area){
			var visiblefor = area.getExtensionData("CM_area_visible")
			if(!visiblefor || visiblefor.size()==0 || db($urlParam_dbkey).isMemberOfUserList(visiblefor))
				structs = area.getRootEntries()
		}
		return structs;
	}
	
	function hasChildren(struct){
		for(let child in Iterator(struct.getChildEntries())){
			if(AFW.structentry(child).isVisible())
				return true;		
		}
		return false;
	}
	
	if($urlParam_id=="root"){
	
		if($urlParam_area){
			structs = getRootEntries($urlParam_area);
		}
		else {
			// return area list
			var database = db($urlParam_dbkey);
			var areas = database.getAreas();
			for(let area in Iterator(areas.values())){

				if(area.systemArea)
					continue;
				if(area.name=="hdb-content" && !WGA.app($urlParam_dbkey).isManager())
					continue;
				var visiblefor = area.getExtensionData("CM_area_visible")
				if(visiblefor && visiblefor.size() && !database.isMemberOfUserList(visiblefor))
					continue;

				if(area.getChildNodes().size()>0)
					ret.push({
						title: WGA.encode("html", area.name),
						id: "area-"+area.name,
						cssclass: "area",
						href: "#",
						hasChildren: true
					})
			}
			WGA.TMLPage.write(JSON.stringify(ret))
			return;
		}
	}
	else if($urlParam_id.indexOf("area-")==0){
		structs = getRootEntries($urlParam_id.substr(5))
	}
	else {
		var parent = db($urlParam_dbkey).getStructEntryByKey($urlParam_id);
		if(parent){
			structs = parent.getChildEntries();
		}
	}

	for(let struct in Iterator(structs)){
		if(!struct.mayReadContent())
			continue;

		var allowedPositions = [];
		for(let key in Iterator(struct.getContentType().getAllowedPositions()))
			allowedPositions.push(key);
		
		var struct_context = {
			contenttype: struct.getContentType().getName(),
			ctPositioning: struct.getContentType().getPositioning(),
			allowedPositions: allowedPositions,
			mayEditChildren: struct.mayEditChildren()==null
		}

		var c = context("db:"+$urlParam_dbkey + "/docid:" + struct.getStructKey() + "<" + $urlParam_language + ">", false);
		if(c){
			ret.push({
				title: WGA.encode("html", c.TITLE),
				id: c.STRUCTKEY,
				cssclass: App.getCssClass(c),
				symbolclass: App.getSymbolIcon(c),
				iconurl: App.getIconURL(c),
				href: c.contenturl("html", null, true),
				context: JSON.stringify(struct_context),
				hasChildren: hasChildren(struct)
			})
		}
		else if(struct.title) {
			AFW.structentry(struct).isVisible() && ret.push({
				title: struct.title,
				href: WGA.urlBuilder(WGA.design().resolve("no-content").layoutURL("html"))
					.setParameter({
						dbkey: $urlParam_dbkey,
						structkey: struct.structKey,
						lang: $urlParam_language
					}).build(),
				id: struct.structKey,
				iconurl: "/plugin-wga-app-framework/file/icons/page_white_error.png",
				cssclass: "not-visible",
				context: JSON.stringify(struct_context),
				hasChildren: hasChildren(struct)
			})
		}
	}
	
	//console.log("ret", JSON.stringify(ret));

	WGA.TMLPage.write(JSON.stringify(ret))
}
