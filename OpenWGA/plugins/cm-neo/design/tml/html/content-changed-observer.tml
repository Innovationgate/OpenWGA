<tml:action id="content-changed">	
	var structkey = request.getParameter("structkey")
	var contentkey = request.getParameter("contentkey");
	var dbkey = request.getParameter("dbkey")
	var language = request.getParameter("language")

	if(dbkey && (!structkey || structkey=="null")){
		var event = createevent("content-changed")
		event.setParameter("dbkey", dbkey)
		event.setParameter("language", language || db(dbkey).getDefaultLanguage())
		portlet.fireevent(event)
		return;
	}
	
	if(!structkey || !dbkey)
		return;
	
	portlet.dbkey=dbkey;
	portlet.contentkey=contentkey;
	portlet.structkey=structkey;

	var path = []
	var struct = db(dbkey).getStructEntryByKey(structkey)
	if(!struct){
		console.log("unable to get struct", structkey, contentkey, dbkey);
		return;
	}
	
	var Struct = AFW.structentry(struct);
	var pagetype = struct.getContentType();
	var area = struct.getArea().name;
	var is_in_trash = (area=="$trash-cm-neo")
	while(struct){
		path.unshift(struct.getStructKey())
		struct = struct.getParentEntry();
	}
	//console.log("path", path.join("/"));
	
	var event = createevent("content-changed")
	event.setParameter("path", path.join("/"))
	event.setParameter("dbkey", dbkey)
	event.setParameter("area", area)
	event.setParameter("structkey", structkey)
	event.setParameter("language", language)
	
	event.setParameter("pagetype", pagetype.getNameForLanguage("de"));
	
	event.setParameter("may_create_content", Struct.mayCreateContent() && !is_in_trash);
	event.setParameter("may_create_child_page", Struct.mayCreatePage() && !is_in_trash);
	event.setParameter("may_delete_page", Struct.mayDeletePage() && !is_in_trash);
	
	event.setParameter("page_visible", Struct.isVisible());
	
	event.setParameter("has_released_contents", Struct.hasReleasedContents());
	event.setParameter("is_in_trash", is_in_trash);
	
	if(Struct.isVisible() && contentkey){
		event.setParameter("contentkey", contentkey)
		var c = context("db:"+dbkey + "/docid:" + contentkey, false);
		if(c){
			var Content = AFW.content(c.content());
			event.setParameter("href", c.contenturl("html", null, true))
			event.setParameter("status", c.STATUS)
			event.setParameter("language", c.LANGUAGE)
			event.setParameter("ismine", c.AUTHOR==c.meta("db", "username"))
			
			var may_archive_version = Content.mayArchiveContent();
			var may_delete_version = Content.mayDeleteContent();
			if(c.ishomepage() && ! WGA.app(dbkey).isChiefEditor()){
				event.setParameter("may_delete_page", false);
				if(c.content().getStatus()==c.content().STATUS_RELEASE){
					may_archive_version = false;
					may_delete_version = false;
				}
			}
			
			event.setParameter("may_update_content", App.mayUpdateContent(c));
			event.setParameter("may_delete_version", may_delete_version);
			event.setParameter("may_archive_version", may_archive_version);
			event.setParameter("may_publish_page", c.STATUS==c.content().STATUS_DRAFT && Content.isMine() && !is_in_trash);
			event.setParameter("may_approve_version", !is_in_trash && c.STATUS==c.content().STATUS_REVIEW && !c.content().isPendingRelease() && Content.mayApprove());
			event.setParameter("may_edit_content", 
				(c.STATUS==c.content().STATUS_RELEASE 
					|| c.STATUS==c.content().STATUS_ARCHIVE 
					|| (c.STATUS==c.content().STATUS_DRAFT && !Content.isMine())
					|| (c.STATUS==c.content().STATUS_REVIEW && c.content().isPendingRelease())
				) 
				&& Content.mayEditContent() && !is_in_trash
			);
			
			event.setParameter("has_userdefined_settings", Content.getUserdefinedMetasTML()!=null)
		}
	}
	
	portlet.fireevent(event)
</tml:action>

<script>
	
	WGA.event.addListener("<tml:script expression="portlet.portletkey"/>", "page-loaded", function(ev){
		var info = ev.params;
		location.hash = info.dbkey + (info.contentkey ? "/" + info.contentkey : info.structkey ? "/"+info.structkey : "");
		WGA.ajax.action({
			action: "<tml:action ref="content-changed" ajax="norefresh"/>",
			mode: "norefresh",
			graydiv: false,
			params: info
		})
	})
	
	WGA.event.addListener("<tml:script expression="portlet.portletkey"/>", "scale", function(ev){
		WGA.ajax.action({
			action: "<tml:action ajax="norefresh">
				profile.scale = request.getParameter("scale")
			</tml:action>",
			mode: "norefresh",
			graydiv: false,
			params: {
				scale: ev.params.scale
			}
		})		
	}) 

	WGA.event.addListener("<tml:script expression="portlet.portletkey"/>", "clipboard-copy", function(ev){
		WGA.ajax.action({
			action: "<tml:action ajax="norefresh">
				var path = "db:"+portlet.dbkey + (portlet.contentkey ? "/docid:"+portlet.contentkey : "/$struct:" + portlet.structkey)
				var ctx = context(path, false);
				if(ctx){
					setsessionvar("_CM_clipboard_context", path)
					var struct;
					if(ctx.document instanceof Packages.de.innovationgate.webgate.api.WGStructEntry)
						struct = ctx.document;
					else struct = ctx.content().getStructEntry()
					var has_released_contents = !struct.getAllReleasedContent().isEmpty();
					portlet.fireevent("clipboard-changed", {
						title: WGA.encode("html", ctx.TITLE),
						lang: ctx.LANGUAGE || "",
						version: ctx.VERSION || 0,
						has_released_contents: has_released_contents,
						status: label("content-properties.status." + ctx.STATUS), 
						contenttpe: ctx.CONTENTTYPE || ""
					})
				}
			</tml:action>",
			mode: "norefresh",
			graydiv: false
		})		
	}) 

	WGA.event.addListener("<tml:script expression="portlet.portletkey"/>", "set-primary-attachment", function(ev){
		WGA.ajax.action({
			action: "<tml:action ajax="norefresh">
				var path = "db:"+portlet.dbkey+"/docid:"+portlet.structkey;
				var c = context(path).content();
				c.setPrimaryFileName(request.filename)
				c.save();
			</tml:action>",
			mode: "norefresh",
			graydiv: false,
			params: {
				filename: ev.params.filename
			}
		})		
	}) 

	WGA.event.addListener("<tml:script expression="portlet.portletkey"/>", "move-page", function(ev){
		WGA.ajax.action({
			action: "<tml:action ajax="norefresh">
			
				var struct = db(portlet.dbkey).getStructEntryByKey(request.key)
				var parent;
				
				if(request.parent){ 
					parent = db(portlet.dbkey).getStructEntryByKey(request.parent)
				}
				else{
					parent = struct.getArea();
				}
				
				//console.log("after", request.after, "before", request.before);
				
				var after = request.after && db(portlet.dbkey).getStructEntryByKey(request.after)
				var before = request.before && db(portlet.dbkey).getStructEntryByKey(request.before)
					
				//console.log("after", after && after.title, "before", before && before.title);
				//console.log("update position", after && after.position, before && before.position);
				
				var pos;
				if(after && before){
					if(before.position - after.position < 2){
						//console.log("renumbering nessessary");
						WGA.Master.runFunction(function(struct){							
							db(struct.getDatabase().getDbReference());	// = reopen session
							var siblings=WGA.createList();
							var next=struct.getNextSibling();
							while(next){
								siblings.add(next);
								next=next.getNextSibling();
							}
							var pos = struct.position+100
							for(let struct in Iterator(siblings)){
								struct.setPosition(pos);
								pos += 100;
								struct.save();
								//console.log("renumbered", struct.title, struct.position);
							}
						}, after)
						pos = after.position+50;
					}
					else pos = (before.position+after.position)/2
				}
				else if(!after && !before){
					pos = 0;
				}
				else if(after){
					// no before
					pos = after.position + 100;
				}
				else{
					// no after
					pos = before.position - 100;
				}
				//console.log("new position", pos);
				
				db(portlet.dbkey).moveStructEntry(struct, parent)
				struct.setPosition(pos);
				struct.save();
				
				portlet.fireEvent("page-moved")
				
			</tml:action>",
			mode: "norefresh",
			graydiv: false,
			params: ev.params
		})		
	}) 

	WGA.event.addListener("<tml:script expression="portlet.portletkey"/>", "logout", function(ev){
		WGA.ajax.action({
			action: "<tml:action>
				WGA.app(portlet.dbkey).domain().auth().logout()
				WGA.redirectTo("<tml:url/>")
			</tml:action>"
		})		
	}) 

</script>

