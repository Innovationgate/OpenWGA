## LICENSE START ###############################################################
## Copyright 2009, 2010 Innovation Gate GmbH. All Rights Reserved.
## 
## This file is part of the OpenWGA server platform.
## 
## OpenWGA is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## In addition, a special exception is granted by the copyright holders
## of OpenWGA called "OpenWGA plugin exception". You should have received
## a copy of this exception along with OpenWGA in file COPYING.
## If not, see <http://www.openwga.com/gpl-plugin-exception>.
## 
## OpenWGA is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with OpenWGA in file COPYING.
## If not, see <http://www.gnu.org/licenses/>.
## LICENSE END #################################################################

<tml:action id="changeLanguage">
	tmlform.doc_container="";
</tml:action>

<tml:script>
	var wgakey = option("wgakey");
	if(wgakey){
		wgakey = wgakey.split("/");
		_container = wgakey[0];
		_filename = wgakey[1];
		_defaultDbKey = wgakey[2];
		var a = _container.split(".");
		_defaultLang = a[1]||LANGUAGE
	}

	if(!tmlform.dbkey)
		tmlform.dbkey = _defaultDbKey || option("dbkey");

	if(!tmlform.language)
		tmlform.language = _defaultLang||LANGUAGE;
	
</tml:script>

<table width="100%" border="0" cellspacing="5">
	<tr>
		<td width="100"><tml:label key="database"/>:</td>
		<td>
			<tml:script>
				var dbs=wgacore.getContentdbs().values().iterator();
				var mydomain=context("db:"+option("dbkey")).meta("db", "domain");
				
				_dbs=createlist();
				while(dbs.hasNext()){
					// Fetch database
					var database = dbs.next();
					if(!AFW.database(database).isBrowsingAllowed())
						continue;
					if(!database.hasFeature(database.FEATURE_FULLCONTENTFEATURES))
						continue;
					var domain=database.getAttribute(wgacore.DBATTRIB_DOMAIN)
					if(mydomain==domain)
						_dbs.add(database.getDbReference());
				}
				if(!_dbs.contains(tmlform.dbkey))
					_dbs.add(tmlform.dbkey);
			</tml:script>
			<tml:input name="dbkey" type="select" optionsitem="_dbs" changeaction="changeLanguage" ajax="true"/>
		</td>
	</tr>
	<tr>
		<td width="100"><tml:label key="language"/>:</td>
		<td>
			<tml:script>
				_opts = AFW.database(tmlform.dbkey).getLanguageOptions(true);
				if(!db(tmlform.dbkey).getLanguages().keySet().contains(tmlform.language))
					tmlform.language = db(tmlform.dbkey).getDefaultLanguage()
			</tml:script>
			<tml:input name="language" type="select" options="{_opts}" default="{_defaultLang}" changeaction="changeLanguage" ajax="true"/>
		</td>
	</tr>
</table>

<div id="link-attachmentview-container">
	<div id="link-attachmentview-toolbar"></div>
	<div id="link-attachmentview" class="ychooser-view">
		<tml:img doc="images" file="loading.gif"/> loading ...
	</div>
</div>

<tml:input type="hidden" cssstyle="width:100%" name="doc_container" default="{_container}"/>
<tml:input type="hidden" name="filename" default="{_filename}"/>

<script>
	
	WGA.portlet.onload.register("<tml:script expression="portlet.portletkey"/>", function() {
		try {
			
			var form = document.forms["<tml:script expression="tmlform.formid"/>"];
			
			function selectFile(url, filename){
				form.filename.value=filename||"";
				BI.LinkDialog.selectLink(url, filename, form.doc_container.value + "/" + filename + "/" + form.dbkey.value);
			}
			
			var combotree = new BI.ComboTree({
				language: "<tml:item name="language" type="tmlform"/>",
				dbkey: "<tml:item name="dbkey" type="tmlform"/>",
			    width: 300,
				valueField: 'id',
				displayField: 'text',
				emptyText:'{%label:dialog.image.select-document%}',
				loaderurl: '<tml:url type="tml" medium="html" layout="json:get-attachment-docs"/>'													
			
				<tml:case context="{'db:'+tmlform.dbkey+'/docid:'+tmlform.doc_container}" iscontextvalid="true">
		        	,path: "/root/<tml:script>
	            		return createObject(pluginDbKey("de.innovationgate.wga-app-framework")+"/structentry").getPath("node-", "/")
		            	</tml:script>"
	     	   </tml:case>
			
			});
			
			combotree.on("beforeselect", function(ctree, node, e) {
				return !node.attributes.disabled;
			});

			combotree.on("select", function(ctree, node, e) {
				form.doc_container.value = ctree.getValue() + ".<tml:item name="language" type="tmlform"/>.0";
				selectFile();
				loadAttachments();
			});
			
			
			var tb = new Ext.Toolbar('link-attachmentview-toolbar');	
			tb.add("->", combotree);


			// define the grid containing attachments
			
			var datastore = new Ext.data.Store({
			    proxy: new Ext.data.HttpProxy({
			        url: '<tml:url type="tml" medium="html" layout="json:get-attachments"/>'	        
		        }),    
		        reader: new Ext.data.JsonReader({
			        id: 'id',
		            root: 'data'                
		        },
		        [
			        { name: 'id'   }, 
			        { name: 'name' },
		            { name: 'url'  },		            
		            { name: 'size' }
		        ])
			});
			// init selections:
			datastore.on('load', function() {
	        	BI.LinkDialog.selectLink();
	        	var node = datastore.getById(form.filename.value);
				if (node) {
					grid.getSelectionModel().selectRecords([node], false);
					selectFile(node.data.url, node.data.id);
				}
	        });
			
			function loadAttachments() {
				datastore.load({
				  	params:{
						type: 'content',
						key: form.doc_container.value,
						dbkey: '<tml:item name="dbkey" type="tmlform"/>'
					}
				});	
			}								
						
	        var cm = new Ext.grid.ColumnModel([
				{id:'name', header:'{%label:dialog.image.col-filename%}', sortable:true, dataIndex:'name' },
				{id:'size', header:'{%label:dialog.image.col-filesize%}', sortable:true, align:"right", renderer: BI.util.renderFileSize, dataIndex:'size' }
			]);
	
			// do not allow multiple selection of grid rows
			var singleSelectionModel = new Ext.grid.RowSelectionModel({singleSelect: true});
	        // create the Grid
	        var grid = new Ext.grid.Grid('link-attachmentview', {
	            ds: datastore,
	            cm: cm,
	            selModel: singleSelectionModel,
	            autoExpandColumn: 'name',
	            loadMask: (Ext.ieIE == false)  // no loading mask in ie due to known ext-bug
	        });
	         
	        grid.on('rowclick', function(g, idx, e) {
	        	var data = datastore.getAt(idx).data;
	        	selectFile(data.url, data.id);
	        });
	        
	        grid.on('rowdblclick', function(g, idx, e) {
	        	BI.dialog.submit();
	        });
	        
	        grid.render('link-attachmentview');
	        if(form.doc_container.value)   
				loadAttachments();
		}
		catch(ex) {
			alert(ex.message);
		}
	});
	
</script>
