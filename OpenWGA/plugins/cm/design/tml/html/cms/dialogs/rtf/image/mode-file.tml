## LICENSE START ###############################################################
## Copyright 2009, 2010 Innovation Gate GmbH. All Rights Reserved.
## 
## This file is part of the OpenWGA server platform.
## 
## OpenWGA is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## In addition, a special exception is granted by the copyright holders
## of OpenWGA called "OpenWGA plugin exception". You should have received
## a copy of this exception along with OpenWGA in file COPYING.
## If not, see <http://www.openwga.com/gpl-plugin-exception>.
## 
## OpenWGA is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with OpenWGA in file COPYING.
## If not, see <http://www.gnu.org/licenses/>.
## LICENSE END #################################################################

<tml:eventscript onevent="CMS_attachments_changed"/>

<tml:action id="changeLanguage">
	tmlform.doc_container="";
</tml:action>

<tml:script>
	_defaultContainer=portlet.container||"";
	_defaultDocContainer="";
	if(_defaultContainer && db().getFileContainer(_defaultContainer)==null)
		_defaultContainer="";
	_defaultKey="";
	if(option("wgakey")){
		if(tmlform.imagesource=="file"){
			var wgakey=option("wgakey").split("/");
			_defaultContainer=wgakey[0];
			_defaultKey=wgakey[1];
		}
		else if(tmlform.imagesource=="extfile"){
			var wgakey=option("wgakey").split("/");
			_defaultDocContainer=wgakey[0];
			_defaultKey=wgakey[1];
			_defaultDbKey = wgakey[2];
			var a = _defaultDocContainer.split(".");
			_defaultLang = a[1]||LANGUAGE 
		}
		else _defaultKey=option("wgakey");
	}
	
	if(!tmlform.language)
		tmlform.language = _defaultLang||LANGUAGE;

	if(tmlform.imagesource=="extfile"){
		if(!tmlform.dbkey)
			tmlform.dbkey = _defaultDbKey || option("dbkey");
	}
	else tmlform.dbkey = option("dbkey");

</tml:script>

<tml:case condition="tmlform.imagesource=='extfile'">
	<table width="100%" border="0" cellspacing="5">
		<tr>
			<td width="100"><tml:label key="database"/>:</td>
			<td>
				<tml:script>
					var dbs=wgacore.getContentdbs().values().iterator();
					var mydomain=context("db:"+option("dbkey")).meta("db", "domain");
					
					_dbs=createlist();
					while(dbs.hasNext()){
						// Fetch database
						var database = dbs.next();
						if(!AFW.database(database).isBrowsingAllowed())
							continue;
						if(!database.hasFeature(database.FEATURE_FULLCONTENTFEATURES))
							continue;
						var domain=database.getAttribute(wgacore.DBATTRIB_DOMAIN)
						if(mydomain==domain)
							_dbs.add(database.getDbReference());
					}
					if(!_dbs.contains(tmlform.dbkey))
						_dbs.add(tmlform.dbkey);
				</tml:script>
				<tml:input name="dbkey" type="select" optionsitem="_dbs" changeaction="changeLanguage" ajax="true"/>
			</td>
		</tr>
		<tr>
			<td width="100"><tml:label key="language"/>:</td>
			<td>
				<tml:script>
					_opts = AFW.database(tmlform.dbkey).getLanguageOptions(true);
					if(!db(tmlform.dbkey).getLanguages().keySet().contains(tmlform.language))
						tmlform.language = db(tmlform.dbkey).getDefaultLanguage()
				</tml:script>
				<tml:input name="language" type="select" options="{_opts}" default="{_defaultLang}" changeaction="changeLanguage" ajax="true"/>
			</td>
		</tr>
	</table>
</tml:case>

<tml:input name="container" type="hidden" default="{_defaultContainer}"/>
<tml:input name="doc_container" type="hidden" cssstyle="width:100%" default="{_defaultDocContainer}"/>
<tml:input name="currentselection" type="hidden" default="{_defaultKey}"/>

<div id="imageview-container">
	<div id="imageview-toolbar"></div>
	<div id="imageview" class="ychooser-view cols4">
		<tml:img doc="images" file="loading.gif"/> loading ...
	</div>
</div>

<tml:script>
	if(portlet.viewmode=="" || portlet.viewmode==null){
		portlet.viewmode="icons";
		portlet.save();
	}
</tml:script>

<script>
	
	BI.ImageDialog.datastore = null;

	WGA.portlet.onload.register("<tml:script expression="portlet.portletkey"/>", function() {
		
		var grid = null;
		
		function selectImage(id, url) {
			var form = document.forms['<tml:script expression="tmlform.formid"/>'];
			form.imageurl.value = url||"";
			form.currentselection.value = id||"";
			id ? BI.dialog.submitButton.enable():BI.dialog.submitButton.disable();
			if(id){
				var wgakey=id;
				if(form.imagesource.value=="file")
					wgakey = form.container.value+"/"+id;
				else if(form.imagesource.value=="extfile")
					wgakey = form.doc_container.value+"/"+id+"/"+form.dbkey.value;
				form.wgakey.value = wgakey;
			}
		}
	
		BI.ImageDialog.datastore = new Ext.data.Store({
		    proxy: new Ext.data.HttpProxy(new Ext.data.Connection({
		        url: '<tml:url type="tml" medium="html" layout="json:get-attachments"/>',
		        params: { dbkey: '<tml:option name="dbkey"/>'},
		        timeout: <tml:script expression="java.lang.System.getProperty('de.innovationgate.wga.cm.timeout') || '30000'"/>
	        })),    
	        baseParams: { sort: "filetype" },
	        reader: new Ext.data.JsonReader({
		        id: 'id',
	            root: 'data'                
	        },
	        [
		        { name: 'id'   }, 
		        { name: 'name' },
		        { name: 'filetype' },
		        { name: 'shortName'},     
	            { name: 'url'  },
	            { name: 'thumbnail'  },
	            { name: 'poster'  },
	            { name: 'size' }
	            
	        ])
		});
				
		var tb = new Ext.Toolbar('imageview-toolbar');
		tb.add({
        		icon: '<tml:url db="{pluginDBKey('de.innovationgate.wga-app-framework')}" type="file" doc="icons" file="application_view_columns.png"/>',
        		cls: 'x-btn-icon',
        		tooltip: '{%label:dialog.image.view-list%}',
        		enableToggle: true,
   				pressed: ('<tml:item type="portlet" name="viewmode"/>'=='list'),   
        		toggleHandler: function() {
        			WGA.ajax.callAction('<tml:action ref="change-view-mode" param1="list" ajax="true"/>', '<tml:script expression="portlet.portletkey"/>');
        		} 
    		},
    		
    		{
        		icon: '<tml:url db="{pluginDBKey('de.innovationgate.wga-app-framework')}" type="file" doc="icons" file="application_view_icons.png"/>', 
        		cls: 'x-btn-icon',
        		tooltip: '{%label:dialog.image.view-thumbnails%}',
        		enableToggle: true,
        		pressed: ('<tml:item type="portlet" name="viewmode"/>'=='icons'),  
        		toggleHandler: function() {
        			WGA.ajax.callAction('<tml:action ref="change-view-mode" param1="icons" ajax="true"/>', '<tml:script expression="portlet.portletkey"/>');
        		}
    		}
    	);


    	var dsFileContainer = new Ext.data.Store({
		    proxy: new Ext.data.HttpProxy({
		        url: '<tml:url type="tml" medium="html" layout="json:get-image-filecontainers"/>' 		        
	        }),    
	        baseParams: { dbkey: '<tml:option name="dbkey"/>' },
	        reader: new Ext.data.JsonReader({
		        id: 'id',
	            root: 'data'                
	        },
	        [
		        { name: 'id'   }, 
		        { name: 'name' }	            
	        ])
		});
    	
    	<tml:case condition="tmlform.imagesource=='file'">
	    	var combo = new Ext.form.ComboBox({
			    store: dsFileContainer,
			    displayField:'name',
			    valueField: 'id',
			    editable: false,
			    mode: 'remote',
			    triggerAction: 'all',
			    emptyText:'{%label:dialog.image.select-container%}',
			    selectOnFocus:true
			});
			
			combo.setValue("<tml:item name="container" type="tmlform"/>");
			combo.on('select', function(cb, r, idx) {
				document.forms['<tml:script expression="tmlform.formid"/>'].container.value = r.id;
				loadImages();
				WGA.ajax.action({
					id: "<tml:script expression="portlet.portletkey"/>",
					action: "<tml:action ajax="norefresh">
								portlet.container=tmlform.container;
								portlet.save();
						</tml:action>",
					mode: "norefresh",
					graydiv: false
				});
							
			});
		
			tb.add("->", combo);
		</tml:case>


		<tml:case condition="tmlform.imagesource=='intfile'">
			tb.add(
				"->",
				{
	        		icon: '<tml:url db="{pluginDBKey('de.innovationgate.wga-app-framework')}" type="file" doc="icons" file="attach.png"/>', 
	        		cls: 'x-btn-icon',
	        		tooltip: '<tml:label key="dialog.image.tooltip.upload-file"/>',
	        		handler: function() {
	        			WGA.ajax.callAction("<tml:action ajax="true">
	        				portlet.setMode("upload");
	        			</tml:action>", "<tml:script>return portlet.portletKey</tml:script>");
	        		}
	    		});
		</tml:case>
		
		
		<tml:case condition="tmlform.imagesource=='extfile'">

			var combotree = new BI.ComboTree({
				language: "<tml:item name="language" type="tmlform"/>",
				dbkey: "<tml:item name="dbkey" type="tmlform"/>",
			    width: 300,
				valueField: 'id',
				displayField: 'text',
				emptyText:'{%label:dialog.image.select-document%}',
				loaderurl: '<tml:url type="tml" medium="html" layout="json:get-image-docs"/>'													
			
				<tml:case context="{'db:'+tmlform.dbkey+'/docid:'+tmlform.doc_container}" iscontextvalid="true">
		        	,path: "/root/<tml:script>
	            		return createObject(pluginDbKey("de.innovationgate.wga-app-framework")+"/structentry").getPath("node-", "/")
		            	</tml:script>"
	     	   </tml:case>
			
			});
			
			combotree.on("beforeselect", function(ctree, node, e) {
				return !node.attributes.disabled;
			});

			combotree.on("select", function(ctree, node, e) {
				document.forms['<tml:script expression="tmlform.formid"/>'].doc_container.value = ctree.getValue() + ".<tml:item name="language" type="tmlform"/>.0"
				loadImages();
			});
			
			tb.add("->", combotree);
		</tml:case>
		
		
		<tml:if condition="portlet.viewmode=='icons'">
			<tml:then>
				var tpl = new Ext.Template(
					'<div class="thumb-wrap" style="{clear}" id="{id}">',
						'<div class="thumb" style="background-image:url(\'{thumbnail}\')"></div>',
						'<span>{name}</span>',
					'</div>'
				);
				
				var view = new BI.util.GroupedView('imageview', tpl,{
					singleSelect: true,
					store: BI.ImageDialog.datastore,
					groupchange: "filetype",
					cols: 4
				});
				
				view.on('selectionchange', function(v, s) {
					if (s[0]) {
						var record = BI.ImageDialog.datastore.getById(s[0].id);
						if (record) {
							var data = record.data
							selectImage(data.id, data.poster);
							// need to set css-classes manually because view.select() lacks this feature :-(
							Ext.each(Ext.query('.x-view-selected'), function(el) {
								Ext.get(el).removeClass('x-view-selected');
							});
							Ext.get(data.id).addClass('x-view-selected');
						}
					}
					else selectImage();	// no selection
				});
				
				view.on('dblclick', function(vw, index, node, e) {
					BI.dialog.submit();
					e.stopEvent();
				});
				
			</tml:then>
			<tml:else>
				// table design
		        var cm = new Ext.grid.ColumnModel([
					{id:'name', header:'{%label:dialog.image.col-filename%}', sortable:true, dataIndex:'name' },
					{id:'size', header:'{%label:dialog.image.col-filesize%}', sortable:true, align:"right", renderer: BI.util.renderFileSize, dataIndex:'size' }
				]);
		
				// do not allow multiple selection of grid rows
				var singleSelectionModel = new Ext.grid.RowSelectionModel({singleSelect: true});
		        // create the Grid
		        grid = new Ext.grid.Grid('imageview', {
		            ds: BI.ImageDialog.datastore,
		            cm: cm,
		            selModel: singleSelectionModel,
		            autoExpandColumn: 'name',
		            loadMask: (Ext.ieIE == false)  // no loading mask in ie due to known ext-bug
		        });
		         
		        grid.on('rowclick', function(g, idx, e) {
		        	var data = BI.ImageDialog.datastore.getAt(idx).data;
					selectImage(data.id, data.poster);
		        });
		        
		        grid.on('rowdblclick', function(g, idx, e) {
		        	BI.dialog.submit();
		        });
		        
		        grid.render('imageview');
		        
			</tml:else>
		</tml:if>
		
		function loadImages(){
			BI.ImageDialog.datastore.load({
			  	params:{
			  		<tml:if condition="tmlform.imagesource=='file'">
			  			<tml:then>
							type: "file",
							key: document.forms['<tml:script expression="tmlform.formid"/>'].container.value,
						</tml:then>
						<tml:elseif condition="tmlform.imagesource=='intfile'">
							type: "content",
							key: "<tml:option name="contentkey"/>",
						</tml:elseif>
						<tml:elseif condition="tmlform.imagesource=='extfile'">
							type: "content",
							key: document.forms['<tml:script expression="tmlform.formid"/>'].doc_container.value,
						</tml:elseif>						
					</tml:if>
					dbkey: '<tml:item name="dbkey" type="tmlform"/>',
					filter: "poster"
				}
			});	
		}
		loadImages();
		
		BI.ImageDialog.datastore.on('load', function() {
				
			<tml:case condition="portlet.viewmode == 'icons'">
				if (BI.ImageDialog.datastore.getTotalCount() <= 0) {
					Ext.get('imageview').insertHtml('afterBegin', 
						<tml:if condition="tmlform.imagesource=='intfile'">
							<tml:then>'<b>{%label:dialog.image.no-files-on-doc%}</b>'</tml:then>
							<tml:else>'<b>{%label:dialog.image.no-files-on-conatiner%}</b>'</tml:else>
						</tml:if>
					);
				}
			</tml:case>			
			
			var current = document.forms['<tml:script expression="tmlform.formid"/>'].currentselection.value;
			if (!current)
				return;
				
			<tml:if condition="portlet.viewmode == 'icons'">
				<tml:then>				
					var node = view.getNode(current);
					if (node) 
						view.select(node, false);	
					if (Ext.get(current)) Ext.get(current).scrollIntoView('imageview');
				</tml:then>
				<tml:else>
					var node = BI.ImageDialog.datastore.getById(current);
					if (node) {
						grid.getSelectionModel().selectRecords([node], false);
						// find row to focus
						for (var i=0; i < BI.ImageDialog.datastore.data.items.length; i++) {
							if (BI.ImageDialog.datastore.data.items[i].id == current) {
								grid.getView().focusRow(i);
								selectImage(current, BI.ImageDialog.datastore.data.items[i].data.poster);
								break;
							}
						}
					}
				</tml:else>
			</tml:if>
			BI.dialog.submitButton.enable();
		});
		
		BI.ImageDialog.datastore.on('loadexception', function(a,b,c) {
			if(c.status==-1)
				alert("Timeout ... unable to read data");
			else alert("Load error: " + c.statusText);
		});
		
	});
	
</script>

