## LICENSE START ###############################################################
## Copyright 2009, 2010 Innovation Gate GmbH. All Rights Reserved.
## 
## This file is part of the OpenWGA server platform.
## 
## OpenWGA is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## In addition, a special exception is granted by the copyright holders
## of OpenWGA called "OpenWGA plugin exception". You should have received
## a copy of this exception along with OpenWGA in file COPYING.
## If not, see <http://www.openwga.com/gpl-plugin-exception>.
## 
## OpenWGA is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with OpenWGA in file COPYING.
## If not, see <http://www.gnu.org/licenses/>.
## LICENSE END #################################################################

<tml:action id="submit">

	if(tmlform.hasfield("_captcha_answer")){
		var service = WGA.db('plugin-cm-modules').getAttribute('captchaService');
		if(service.validateResponse(this, tmlform._captcha_answer))
			tmlform._captcha_verified=true;
		else {
			_captcha_error=true;
			return tmlform.validate();
		}	
	}

	if(!tmlform.validate())
		return;

	tmlform.removefield("_captcha_verified")

	var action = CMM.settingList("action");
	if(action.contains("mail")){
		console.log("send mail", CMM.setting("mail"));
		var mailto = CMM.settingList("mail")
		if(!mailto.size()){
			tmlform.addmessage("No mail address specified in form");
			log.error("module 'form' in document '" + TITLE + "': No mail address specified.");
			return;
		}
		
		var mail_addresses = {
			to: WGA.createList(),
			cc: WGA.createList(),
			bcc: WGA.createList()
		};
	
		// analyse mailto input:
		for(let addr in Iterator(mailto)){
			if(!addr)
				continue;
			/*
			 * possible special format:
			 * to:<fieldname>
			 * cc:<fieldname>
			 * bcc:<fieldname>
			 */			
			var parts = addr.split(":");
			if(parts.length>1 && parts[1]){
				var a = AFW.Util.list(tmlform.fieldList(parts[1])).trim();
				if(a.size()){
					mail_addresses[parts[0]].addAll(a)
				}
			}
			else {
				mail_addresses.to.add(addr);
			}
		}
		console.log("to", mail_addresses.to); 

		try{
			var mail=WGA.createMail();
			mail.setMimeType("text/html");			
			mail.to=mail_addresses.to;
			mail.cc=mail_addresses.cc;
			mail.bcc=mail_addresses.bcc;			
			mail.subject=$option_title;
		
			var mailbody="";
			var forminfo = tmlform.processcontext.get("forminfo");
			var fields = forminfo.keySet().iterator();
			while(fields.hasNext()){
				var fieldinfo = forminfo.get(fields.next());
				var field = fieldinfo.get("name").trim();
				var label = fieldinfo.get("label");
				
				var values = tmlform.fieldList(field).iterator();
				mailbody += "<b>" + label + "</b> (" + field + "):<br>";
				while(values.hasNext())
					mailbody += (encode("html", values.next()) +"<br>");
				mailbody += "<br>";
			}
			
			if(tmlform.getfilenames().size()){
				mailbody += "<hr>"
				for(let filename in Iterator(tmlform.getfilenames())){
					mail.addAttachment(tmlform.getfile(filename))
				} 
			}
			mail.body = mailbody;
			mail.send();
		}
		catch(e){
			log.info("Unable to send Mail: " + e.javaException);
			logException(e);
		}
	}
	if(action.contains("store")){

		var dbkey = CMM.setting("dbkey");
		var id = WGA.scoped('formid');

		WGA.Master.runFunction(function(id, title, dbkey){
			var ctx = context("db:"+dbkey, false);
			if(!ctx){
				log.info("Unable to open database " + dbkey);
				return tmlform.addMessage("Unable to open database " + dbkey);
			}
			var hdb = WGA.hdb(dbkey);
			var root = hdb.getOrCreateStorage("forms")
			var s = hdb.getOrCreateStorage(root, id + "-" + STRUCTKEY)
			var forminfo = tmlform.processcontext.get("forminfo");
			s.setItemValue("forminfo", forminfo)
			var fields = createlist();
			fields.addAll(forminfo.keySet());
			s.setItemValue("fieldinfos", fields)
			s.setTitle(title);
			s.save();
			var doc = hdb.createContent(s, createdate())
			tmlform.attach(doc)
			tmlform.storeincontent(doc);
			log.info("form " + id + " stored in db " + dbkey);
		}, id, $option_title, dbkey);

	}
	
	if(CMM.setting('aftersubmit')=="redirect")
		redirectto(context("docid:"+CMM.setting('redirect')).contenturl(null, null));	
	tmlform.successmessage=true
	
</tml:action>

<tml:include ref="init"/>

<tml:form source="none" id="{WGA.scoped('form-id')}">

	<tml:script>
		tmlform.processcontext.put("forminfo", new Packages.java.util.LinkedHashMap())		
	</tml:script>

	<tml:if condition="tmlform.successmessage">
	
		<tml:then>
			<div class="success-message">
				<tml:[setting] o_name="successmessage" encode="html"/>
			</div>
		</tml:then>

		<tml:else>
			
			<tml:case condition="tmlform.hasmessages()">
				<div class="form-message"> 
					<div class="headline"><tml:label key="form.validationmessage.title"/></div>
					<ul>
						<li><tml:formmessages divider="</li><li>"/></li>
					</ul>
				</div>
			</tml:case>
			
			<tml:include ref="system:include-child-modules">
				<tml:option name="margins" expression="true" scope="local"/>
				<tml:option name="module-class">section</tml:option>
			</tml:include>
			
			<div class="buttons clearfix">
				<tml:button cssclass="btn btn-default" clickaction="submit">
					<tml:[setting] o_name="submit-button-text"/>
				</tml:button>
			</div>
			
			<tml:[script]>
				require([
					"jquery-ui-js/datepicker",
					<tml:case condition="LANGUAGE!='en'">
						<tml:script>
							_lang = LANGUAGE;
							if(_lang=="jp")
								_lang = "ja"	// japanese label file ends with "ja".
						</tml:script>
						"jquery-ui-js/i18n/datepicker-<tml:item name="_lang"/>",
					</tml:case> 
					"css!jquery-ui-css",
					"jquery-textarea-autogrow"
				], function(picker, config){
					if(picker){
						config && picker.setDefaults(config);
						picker.setDefaults({							
							showWeek: true,
							changeMonth: true,
							changeYear: true,
							showAnim: "show"
						})
					}
					$("#<tml:script expression="tmlform.formid"/>")
						.find(".field-type-date input").each(function(el){
							$this = $(this);
							$this.datepicker({
								yearRange: $this.data("year-range")
							})
						})
						.end()
						.find(".field-type-textarea textarea").autogrow()
				})
			</tml:[script]>
			
		</tml:else>
		
	</tml:if>
	
</tml:form>
