## LICENSE START ###############################################################
## Copyright 2009, 2010 Innovation Gate GmbH. All Rights Reserved.
## 
## This file is part of the OpenWGA server platform.
## 
## OpenWGA is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## In addition, a special exception is granted by the copyright holders
## of OpenWGA called "OpenWGA plugin exception". You should have received
## a copy of this exception along with OpenWGA in file COPYING.
## If not, see <http://www.openwga.com/gpl-plugin-exception>.
## 
## OpenWGA is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with OpenWGA in file COPYING.
## If not, see <http://www.gnu.org/licenses/>.
## LICENSE END #################################################################
<tml:range labelfile="rtf">
Ext.ux.RTF = {};

Ext.ux.RTF.TableMenu = function(config){
    Ext.ux.RTF.TableMenu.superclass.constructor.call(this, config);
    this.plain = true;
    var i = new Ext.ux.RTF.TableItem(config);
    this.add(i);
};
Ext.extend(Ext.ux.RTF.TableMenu, Ext.menu.Menu);

Ext.ux.RTF.TableItem = function(config){
    Ext.ux.RTF.TableItem.superclass.constructor.call(this, config);
};

Ext.extend(Ext.ux.RTF.TableItem, Ext.menu.BaseItem, {
   
    itemCls : "bi-table-menu",
    maskCls : 'bi-table-menu-mask',
    canActivate : true,
    showDelay: 200,
    hideDelay: 200,
  
    listAlign: 'tl-bl?',
    
    minWidth: 100,
    minHeight: 100,
    maxWidth: 300,
    maxHeight: 300,
    
    cellWidth : 14,
    cellHeight : 14,

	handleHeight: 8,
	
	restrictHeight : function() {
        var pad = this.el.getFrameWidth('tb')+this.handleHeight;
        
        var h = this.el.getHeight();
        var w = this.el.getWidth();
        
        if (w < this.minWidth) w = this.minWidth;
        if (w > this.maxWidth) w = this.maxWidth;
        if (h < this.minHeight) h = this.minHeight;
        if (h > this.maxHeight) h = this.maxHeight;
        
        w -= w % this.cellWidth;
        h -= h % this.cellWidth;

        this.el.setHeight(h+pad);
        this.el.setWidth(w+pad);
        
        this.container.setHeight(h+pad);
        this.container.setWidth(w+pad);

		this.parentMenu.el.setWidth(w+pad+8);
		this.parentMenu.el.setHeight(h+pad+8);
		
	},

    updateStatus : function(e) {
    	 var pad = this.el.getFrameWidth('tb')+this.handleHeight;
    	
    	this.tableCols = 1 + parseInt((Math.max((e.getPageX() - this.el.getX()),0)) / this.cellWidth, 10);
    	this.tableRows = 1 + parseInt((Math.max((e.getPageY() - this.el.getY()), 0)) / this.cellHeight, 10);
    
    	this.tableCols = Math.min((this.el.getWidth()-pad)/this.cellWidth, this.tableCols);
    	this.tableRows = Math.min((this.el.getHeight()-pad)/this.cellHeight, this.tableRows);
    },
    
    updateStatusInfo : function() {
    	var info = Ext.get('table_dim_info');
    	
    	if (info)
    		info.remove();
    	
    	info = this.el.createChild({
    		id: 'table_dim_info',
    		tag: 'div',
    		cls: 'info'
    	});
    	
    	info = Ext.get(info);
    	
 		info.setWidth(60);
    	info.setX(this.el.getX() + this.el.getWidth()/2 - info.getWidth()/2);
		info.setY(this.el.getY() + this.el.getHeight()/2 - info.getHeight()/2);
		
		info.insertHtml('afterBegin', '<center><b>'+this.tableCols + ' x ' + this.tableRows+'</b></center>');
    },    
    
    updateMask : function() {
    
    	var mw = this.tableCols * this.cellWidth;
    	var mh = this.tableRows * this.cellHeight;
    	
    	this.mask.setWidth(mw);
    	this.mask.setHeight(mh);
    },

    // private
    onRender : function(container, position){
        var el = document.createElement("div");        
        el.className = this.itemCls;        
        this.el = el;
        
        this.mask = Ext.get(el).createChild({tag:'div', cls:'mask'});
        
		Ext.ux.RTF.TableItem.superclass.onRender.call(this, container);
        
        Ext.get(el).on('mousemove', function(e) {
        	this.activate();
        	this.updateStatus(e);
			this.updateStatusInfo();
			this.updateMask();
			this.mask.show();
        }, this);
        
        Ext.get(this.parentMenu.el).on('mouseout', function(e) {
        	this.hideIf(e);
        }, this);
        
    	this.restrictHeight();
    	
    	this.resizer = new Ext.Resizable(this.el,  {
		    pinned:true, handles:'se'
		});
        this.resizer.on('resize', function(r, w, h){
        	this.restrictHeight();
        }, this);
    },
    
    hideIf : function(e){

        if(!e.within(this.el) && !e.within(this.container)){
        	 this.mask.hide();
    	
		     var info = Ext.get('table_dim_info');
		    	
		     if (info)
			     info.remove();
		    	
		     this.tableCols = 0;
		     this.tableRows = 0;        	
        }
    },
    
    activate : function(autoExpand){
		this.restrictHeight();
		Ext.get(document).on('mousewheel', this.hideIf, this);
    	Ext.get(document).on('mousedown', this.hideIf, this);	
    },
    
    deactivate : function() {   	
    	Ext.get(document).un('mousewheel', this.hideIf, this);
        Ext.get(document).un('mousedown', this.hideIf, this);    
    }
});

Ext.ux.RTF.toolbar=function(){
	var editor;
	var dialog, toolbar, toolbarElements;
	var hideoptions, showoptions;
	var editorSelection=null;
	
	function doCommand(button, ev){
		Ext.ux.RTF.toolbar.restoreEditorSelection();
		editor.execCmd(button.cmd, button.param||null);
		//editor.focus();
	}

	function isCmdDisabled(cmd){
		// Helperfunction: check show/hide options.
		// showoptions count more: If command is in showoptions than show the button.
		// If not in showoptions but (and) in hideoptions: hide the button. Otherwise show it.
		if(!editor.isEditorSelected())
			return true;
		if(showoptions.indexOf("all") != -1)
			return false;
		if (showoptions.toLowerCase().indexOf(cmd.toLowerCase()) == -1 && 
				(
					hideoptions.toLowerCase().indexOf(cmd.toLowerCase()) != -1
					||
					hideoptions.toLowerCase().indexOf("all") != -1
				)){
			return true;
		}
		else {
			return false;
		}
	}

	function updateButtons(toolbar) {
		var enabled;		
		toolbar.items.each(function(item){
		
			if(!editor.isEditorSelected()){
				item.disable();
			}
		
			else if(item.cmd){
				
				try{
					enabled = item.queryCommandState ? item.queryCommandState() : editor.doc.queryCommandState(item.cmd);
			   	}catch(e){		/* command not queryable */   
			   		enabled=false;
			   	}
				if(enabled)
				    item.toggle(true);
				else item.toggle(false);
			
				enabled = true;
				try{			
					if(isCmdDisabled(item.cmd) || (item.cmd_alias && isCmdDisabled(item.cmd_alias)) || (item.queryCommandEnabled && !item.queryCommandEnabled()))
						enabled=false;
				}
				catch(e){
					enabled=false;
				}
				
				if(enabled){
					if(item.disabled)
						item.enable();
				}
				else {
					if(!item.disables)
						item.disable();
				}
			}
		});
	}

	function updateMenu(menu){
		menu.items.each(function(item){
			if(item.cmd){
				enabled = true;
				try{			
					if(isCmdDisabled(item.cmd) || (item.queryCommandEnabled && !item.queryCommandEnabled(item.cmd)))
						enabled=false;
				}
				catch(e){
					enabled=false;
				}
				
				if(enabled)
					item.enable();
				else item.disable();
			}
		})
	}		

	function showLinkDialog(button, ev) {
		var opts={linktype: 'exturl'};
		Ext.ux.RTF.toolbar.restoreEditorSelection();
		var atag = editor.getNearestTagFromSelection("a");
		if(atag && atag.href){
			var linkinfo=AFW.RTF.getURLInfo(atag);
			opts={
				linktype: linkinfo.type || "exturl",
				wgakey: linkinfo.key,
				target: atag.target
			}			
		}
		MD.show("rtf:insert-link", ev?ev.target:null, { 
			context: Ext.ux.RTF.toolbar.context,
			params: opts
		});
		MD.callback=function(url, linktext, linkinfo, target){	// linktype, target){
			Ext.ux.RTF.toolbar.restoreEditorSelection();
			var atag = editor.createLink(url, linktext, linkinfo.type);
			if(atag){
				AFW.RTF.setURLInfo(atag, linkinfo)
				if(target)
					atag.target=target;
				else atag.removeAttribute("target")
			}
			Ext.ux.RTF.toolbar.update();
		}
	}
	
	function showImageDialog(button, ev) {
		var opts={};
		Ext.ux.RTF.toolbar.restoreEditorSelection();
		var imgtag = editor.getNearestTagFromSelection("img");
		if(imgtag){
			var linkinfo=AFW.RTF.getURLInfo(imgtag);
			opts={
				linktype: linkinfo.type || "exturl",
				wgakey: linkinfo.key
			}
		}
		Ext.ux.RTF.toolbar.saveEditorSelection();
		MD.show("rtf:insert-image", ev?ev.target:null, { 
			context: Ext.ux.RTF.toolbar.context,
			params: opts
		});
		MD.callback=function(url, linktype, title, linkinfo){
			Ext.ux.RTF.toolbar.restoreEditorSelection();
			var imgtag = editor.createImg(url, linktype);
			if(imgtag){
				AFW.RTF.setURLInfo(imgtag, linkinfo)
				if(title){
					imgtag.title=title;
					imgtag.alt=title;
				}
			}
			Ext.ux.RTF.toolbar.update();
		}
	}


	Ext.onReady(function(){

		// create dialogs for images and links
		MD.create("rtf:insert-image", {
			id: 				"rtf:insert-image",
			title:				"<tml:label file="rtf" key="insert-image"/> ...",
			designdb:			"plugin-app-ui-3-1",
			tml: 				"rtf:insert-image",
			submitButton:		{
				action:			"insert-image",
				submitOnEnter:	true
			}
		})
		MD.create("rtf:insert-link", {
			id: 				"rtf:insert-link",
			title:				"<tml:label file="rtf" key="insert-link"/> ...",
			designdb:			"plugin-app-ui-3-1",
			tml: 				"rtf:insert-link",
			submitButton:		{
				action:			"insert-link",
				submitOnEnter:	true
			}
		})
		
		var tableMenu = new Ext.ux.RTF.TableMenu({
			shadow: false,
			handler: function() {
				Ext.ux.RTF.toolbar.restoreEditorSelection();
				editor.createTable(this.tableRows, this.tableCols, '100%', '');
			}
		});
		tableMenu.on('show', function(){
			Ext.getBody().mask();				
		});
		tableMenu.on('hide', function(){
			Ext.getBody().unmask();	
		});

		toolbarElements = [
			{
				cmd: "Undo",
				cls: "x-btn-icon",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="arrow_undo.png"/>",
				tooltip: "<tml:label key="RTFToolbar.undo"/>",
				handler: doCommand
			},
			{
				cmd: "Redo",
				cls: "x-btn-icon",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="arrow_redo.png"/>",
				tooltip: "<tml:label key="RTFToolbar.redo"/>",
				handler: doCommand
			},
			'-',
			{
				cmd: "edit-helper",
				cls: "x-btn-icon",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="tag.png"/>",
				tooltip: "<tml:label key="RTFToolbar.edit-helper"/>",				
				handler: function(){
					editor.toggleEditHelper();
					Ext.ux.RTF.toolbar.editHelper = editor.hasEditHelper();
					Ext.ux.RTF.toolbar.restoreEditorSelection();
				},
				queryCommandState: function(){
					return editor.hasEditHelper();
				}
			},
			'-',
			{
				cmd: "RemoveFormat",
				cls: "x-btn-icon",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="html_delete.png"/>",
				tooltip: "<tml:label key="RTFToolbar.removeFormatting"/>",
				handler: doCommand
			},				
			'-',
			{
				cmd: "Bold",
				cls: "x-btn-icon",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="text_bold.png"/>",
				tooltip: "<tml:label key="RTFToolbar.bold"/>",
				handler: doCommand
			},
			{
				cmd: "Italic",
				cls: "x-btn-icon",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="text_italic.png"/>",
				tooltip: "<tml:label key="RTFToolbar.italic"/>",
				handler: doCommand
			},
			{
				cmd: "Underline",
				cls: "x-btn-icon",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="text_underline.png"/>",
				tooltip: "<tml:label key="RTFToolbar.underline"/>",
				handler: doCommand
			},
			"-",
			{
				cmd: "Sub",
				cls: "x-btn-icon",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="text_subscript.png"/>",
				tooltip: "<tml:label key="RTFToolbar.subscript"/>",
				queryCommandState: function(){
					var el = editor.getNearestTagFromSelection("sub"); 
					return el!=null
				},
				handler: doCommand
			},
			{
				cmd: "Sup",
				cls: "x-btn-icon",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="text_superscript.png"/>",
				tooltip: "<tml:label key="RTFToolbar.superscript"/>",
				queryCommandState: function(){
					var el = editor.getNearestTagFromSelection("sup"); 
					return el!=null
				},
				handler: doCommand
			},
			"-",
			{
				cmd: "JustifyLeft",
				cls: "x-btn-icon",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="text_align_left.png"/>",
				tooltip: "<tml:label key="RTFToolbar.justifyLeft"/>",
				handler: doCommand
			},
			{
				cmd: "JustifyCenter",
				cls: "x-btn-icon",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="text_align_center.png"/>",
				tooltip: "<tml:label key="RTFToolbar.justifyCenter"/>",
				handler: doCommand
			},
			{
				cmd: "JustifyRight",
				cls: "x-btn-icon",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="text_align_right.png"/>",
				tooltip: "<tml:label key="RTFToolbar.justifyRight"/>",
				handler: doCommand
			},
			{
				cmd: "JustifyFull",
				cls: "x-btn-icon",
				tooltip: "<tml:label key="RTFToolbar.justifyFull"/>",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="text_align_justify.png"/>",
				handler: doCommand
			},
			"-",
			{
				cmd: "Indent",
				cls: "x-btn-icon",
				tooltip: "<tml:label key="RTFToolbar.indent"/>",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="text_indent.png"/>",
				handler: doCommand
			},
			{
				cmd: "Outdent",
				cls: "x-btn-icon",
				tooltip: "<tml:label key="RTFToolbar.outdent"/>",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="text_indent_remove.png"/>",
				handler: doCommand
			},
			"-",
			{
				cmd: "InsertUnorderedList",
				cls: "x-btn-icon",
				tooltip: "<tml:label key="RTFToolbar.bulletList"/>",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="text_list_bullets.png"/>",
				handler: doCommand
			},
			{
				cmd: "InsertOrderedList",
				cls: "x-btn-icon",
				tooltip: "<tml:label key="RTFToolbar.enumList"/>",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="text_list_numbers.png"/>",
				handler: doCommand
			},
			"-",
			{
				cmd: "InsertImg",
				cmd_alias: "InsertSimpleImg",
				cls: "x-btn-icon",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="picture.png"/>",
				tooltip: "<tml:label key="RTFToolbar.insertImage"/>",
				handler: function(m, ev){
					showImageDialog(m, ev);
				}				
			},
			{
				cmd: "InsertTable",
				cmd_alias: "TableProperties",
				cls: "x-btn-icon",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="table_add.png"/>",
				tooltip: "<tml:label key="RTFToolbar.insertTable"/>",
				menu: tableMenu
			},
			{
				cmd: "InsertLink",
				cmd_alias: "InsertSimpleLink",
				cls: "x-btn-icon",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="link.png"/>",
				tooltip: "<tml:label key="RTFToolbar.insertLink"/>",
				handler: showLinkDialog	
			},
			{
				cls: "x-btn-icon",
				icon: "<tml:url db="@afw" type="file" doc="icons" file="link_delete.png"/>",
				tooltip: "<tml:label key="RTFToolbar.unlink"/>",
				cmd: "Unlink",
				queryCommandEnabled: function(){
					var link = editor.getNearestTagFromSelection("a"); 
					return link && link.href;
				},
				handler: doCommand	
			}
		];

		if(Ext.isIE){
			toolbarElements.unshift(
				{
					cmd: "Paste",
					cls: "x-btn-icon",
					icon: "<tml:url db="@afw" type="file" doc="icons" file="paste_plain.png"/>",
					tooltip: "<tml:label key="RTFToolbar.paste"/>",
					handler: doCommand
				},
				'-'
			)
		}
		toolbar = new Ext.Toolbar({
			items: toolbarElements
		});
		if(Ext.isWebKit)		
			toolbar.style="display: table";

		// create the Ext dialog:
		dialog = new Ext.Window({			
	        modal:false,
			resizable: false,
			collapsible: true,
			closable: false,
	        title: "Richtext Toolbar",
			tbar: toolbar
		});
		if(Ext.isIE)		
			dialog.width=600;
		dialog.render(Ext.getBody());

		dialog.on("show", function(){
			editor.focus();
			if(WGA.isWebKit)
				editor.doc.defaultView.getSelection().collapseToStart();
		});

		dialog.focus=function(){
			//overwrite original focus methode because we don't want the RTFEditor to lose focus.
			//console.log("dialog focus");			
		}

		var dd=dialog.dd;
		dd.b4StartDrag = function(){
			Ext.getBody().mask();
		}
		dd.b4EndDrag = function(){ 
			Ext.getBody().unmask();
		}

	})
			
	return{
		/*
			public interface
		*/
		showLinkDialog: showLinkDialog,
		showImageDialog: showImageDialog,
		updateButtons: updateButtons,
		updateMenu: updateMenu,
		isCmdDisabled: isCmdDisabled,
		
		setEditor: function(e){
			editor = e;
			editor.toolbar = Ext.ux.RTF.toolbar;
		},
		getEditor: function(){
			return editor;
		},
				
		getShowOptions: function() {
			return showoptions;
		},

		getHideOptions: function() {
			return hideoptions;
		},
				
		update: function(eventType){
			Ext.ux.RTF.toolbar.saveEditorSelection();
			updateButtons(toolbar);
			if(Ext.ux.RTF.toolbar.toolpanel)
				Ext.ux.RTF.toolbar.toolpanel.update(eventType);
			
		},
	
		show: function(){
			dialog.show();
			Ext.ux.RTF.toolbar.update.defer(250);	// defere this so that RTF-editor is displayed quickly
		},
		
		hide: function(){
			dialog.hide();
		},

		showToolbarDialog: function(){
			dialog.show();
		}, 

		saveEditorSelection: function(){
			if(WGA.isIE)
				editorSelection = editor.getRange();
			else editor.selection.save();
		},
		restoreEditorSelection: function(){
			if(WGA.isIE){
				if(editorSelection){
					editor.focus();
					editor.setRange(editorSelection);				
				}
			}
			else {
				editor.selection.restore();
			}
		},

		init: function(hideArray, showArray) {
			var defaultHideOptions="ForeColor, FontName, FontSize, editHTML";
			if(!WGA.isIE)
				defaultHideOptions += ",Paste";
			hideoptions=hideArray+","+defaultHideOptions;
			showoptions=showArray;
			
			if(this.onShow)
				this.onShow(dialog);
		},
		
		editorLostFocus: function(){
			//console.log("lost focus");
			//Ext.ux.RTF.toolbar.update.defer(250);
		},
		editorGotFocus: function(){
			//console.log("got focus");
			//Ext.ux.RTF.toolbar.update.defer(250);
		},		
		
		doKeyFunction: function(ev){
			var key = String.fromCharCode(ev.keyCode || ev.which).toLowerCase();			
			switch(key){
				case "b":
					editor.execCmd("Bold");
					return true;
				case "i":
					editor.execCmd("Italic");
					return true;
				case "u":
					editor.execCmd("Underline");
					return true;
				case "p":
					this.showImageDialog();
					return true;
			}
			return false;
		},
		
		paragraphStyleList: [],
		sectionStyleList: [],
		tableStyleList: [],
		trStyleList: [],
		tdStyleList: []
	
	}	
}();

</tml:range>
