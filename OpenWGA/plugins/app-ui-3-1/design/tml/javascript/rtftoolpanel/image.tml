## LICENSE START ###############################################################
## Copyright 2009, 2010 Innovation Gate GmbH. All Rights Reserved.
## 
## This file is part of the OpenWGA server platform.
## 
## OpenWGA is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## In addition, a special exception is granted by the copyright holders
## of OpenWGA called "OpenWGA plugin exception". You should have received
## a copy of this exception along with OpenWGA in file COPYING.
## If not, see <http://www.openwga.com/gpl-plugin-exception>.
## 
## OpenWGA is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with OpenWGA in file COPYING.
## If not, see <http://www.gnu.org/licenses/>.
## LICENSE END #################################################################
/*
 * Imgage tab
 */
 
var img_toolbar = new Ext.Toolbar({
	renderTo: "rtf-toolbar-img", 
	items:[
		{
			cmd: "InsertImg",
			text: "<tml:label key="rtf.change-or-create"/>",
			cls: "x-btn-text-icon",
			tooltip: "<tml:label key="rtf.image.change-or-create"/>",
			icon: "<tml:url db="@afw" type="file" doc="icons" file="picture.png"/>",
			handler: function(button, ev){
				Ext.ux.RTF.toolbar.showImageDialog(button, ev);
			}
		}
	]
});

function imageAlignHandler(m, ev){
	Ext.ux.RTF.toolbar.restoreEditorSelection();
	var el = editor.getNearestTagFromSelection("img");
	if(el){
		el.align=m.img_align;
		imageAlignMenu.items.each(function(item){
			if(item.img_align==m.img_align){
				imageAlignButton.setText(m.text);
    	        var btnEl = imageAlignButton.getEl().child("button:first");
				btnEl.setStyle('background-image', 'url(' +m.icon +')');
			}
		})
	}
}
var imageAlignMenu = new Ext.menu.Menu({
	items:[
		{
			text: "<tml:label key="rtf.image.align.none"/>",
			img_align: "",
			cls: "x-btn-text-icon",
			icon: "<tml:url db="@afw" type="file" doc="icons" file="text_padding_top.png"/>",
			handler: imageAlignHandler
		}
		,{
			text: "<tml:label key="rtf.image.align.left"/>",
			img_align: "right",
			cls: "x-btn-text-icon",
			icon: "<tml:url db="@afw" type="file" doc="icons" file="text_padding_right.png"/>",
			handler: imageAlignHandler
		}
		,{
			text: "<tml:label key="rtf.image.align.right"/>",
			img_align: "left",
			cls: "x-btn-text-icon",
			icon: "<tml:url db="@afw" type="file" doc="icons" file="text_padding_left.png"/>",
			handler: imageAlignHandler
		}
	]		
})
var imageAlignButton = new Ext.Button({
	renderTo:	"rtf-img-input-align",
	cls: "x-btn-text-icon",
	icon: "<tml:url db="@afw" type="file" doc="icons" file="text_padding_top.png"/>",
	text: "<tml:label key="rtf.image.align.none"/>",
	menu: imageAlignMenu
})

var selectedImg;
addUpdateListener(function(eventType){
	imageAlignButton.setText("<tml:label key="rtf.image.align.none"/>");
	
	//Ext.ux.RTF.toolbar.restoreEditorSelection();
	// check for image tag
	var tag = editor.getNearestTagFromSelection("img");
	if(tag){
		selectedImg = tag;
		var imginfo = AFW.RTF.getURLInfo(tag);
		var urltype = imginfo.type||"exturl"; 

		if(urltype=="intfile" && eventType && eventType!="blur"){
			WGA.event.fireEvent("CMS_attachment_selected", "rtftoolbar", imginfo)
		} 

		Ext.get("rtf-img-type").update('<a href="#">' + {
			exturl: "<tml:label key="rtf.image.source.exturl"/>",
			intfile: "<tml:label key="rtf.image.source.intfile"/>",
			extfile: "<tml:label key="rtf.image.source.extfile"/>",
			file: "<tml:label key="rtf.image.source.file"/>"						
		}[urltype] + '</a>');
		Ext.get("rtf-img-type").on("click", function(ev){
			Ext.ux.RTF.toolbar.showImageDialog(null, WGA.isIE?{target:null}:ev);
		})		

		if(urltype=="exturl")
			Ext.get("rtf-img-input-url-wraper").setStyle("display", "block");
		else Ext.get("rtf-img-input-url-wraper").setStyle("display", "none")

		Ext.get("rtf-img-input-url").dom.value=tag.src
		Ext.get("rtf-img-input-title").dom.value=tag.title;
		Ext.get("rtf-img-input-alt").dom.value=tag.alt;
		Ext.get("rtf-img-input-border").dom.value=tag.border;
		Ext.get("rtf-img-input-width").dom.value=tag.width;
		Ext.get("rtf-img-input-height").dom.value=tag.height;

		var margins = Ext.fly(tag).getMargins();
		var vstr = tag.hspace||0
		if(margins.top==margins.left && margins.top==margins.bottom && margins.top==margins.right)
			vstr=margins.top;
		else vstr = margins.top + " " + margins.right + " " + margins.bottom + " " + margins.left
		Ext.get("rtf-img-input-padding").dom.value=vstr;
		
		imageAlignButton.enable();
		img_actionbutton.enable();
		imageAlignMenu.items.each(function(item){
			if(item.img_align==tag.align){
				imageAlignButton.setText(item.text);
    	        var btnEl = imageAlignButton.getEl().child("button:first");
				btnEl.setStyle('background-image', 'url(' +item.icon +')');
			}
		})
	}
	else {
		selectedImg = null;
		Ext.get("rtf-img-type").update("<tml:label key="rtf.image.none-selected"/>");
		Ext.get("rtf-img-input-url-wraper").setStyle("display", "none");
		
		Ext.get("rtf-img-input-url").dom.value="";
		Ext.get("rtf-img-input-title").dom.value="";
		Ext.get("rtf-img-input-alt").dom.value="";
		Ext.get("rtf-img-input-border").dom.value="";
		Ext.get("rtf-img-input-width").dom.value=""
		Ext.get("rtf-img-input-height").dom.value=""
		Ext.get("rtf-img-input-padding").dom.value=""

		imageAlignButton.disable();
		img_actionbutton.disable();
	}
	updateButtons(img_toolbar)
})


/* setup key event handlers */

var h_el = Ext.get("rtf-img-input-height");
var w_el = Ext.get("rtf-img-input-width");
var border_el = Ext.get("rtf-img-input-border");
var padding_el = Ext.get("rtf-img-input-padding");
var title_el = Ext.get("rtf-img-input-title");
var alt_el = Ext.get("rtf-img-input-alt");

function handleUpDown(event, el){
	var step = event.shiftKey?10:1;
	switch(event.getKey()){
		case Ext.EventObject.UP:
			el.value = Number(el.value)+step;
			break;
		case Ext.EventObject.DOWN:
			el.value = Number(el.value)-step;
			break;
	}
}

h_el.on("keyup", function(event, el){
	var img = selectedImg;
	if(img){
		var step = event.shiftKey?10:1;
		switch(event.getKey()){
			case Ext.EventObject.UP:
				el.value = Number(el.value)+step;
				break;
			case Ext.EventObject.DOWN:
				el.value = Number(el.value)-step;
				break;
		}
		function recalc(){
			img.removeAttribute("width");
			if(!h_el.dom.value)
				img.removeAttribute("height");
			else img.height = h_el.dom.value;
			if(h_el.dom.value != img.height)
				h_el.dom.value = img.height;
			if(w_el.dom.value != img.width)
				w_el.dom.value = img.width;
		}
		recalc.defer(500)
	}
	
})

w_el.on("keyup", function(event, el){
	var img = selectedImg;
	if(img){
		handleUpDown(event, el);
		function recalc(){
			img.removeAttribute("height");
			if(!w_el.dom.value)
				img.removeAttribute("width");
			else img.width = w_el.dom.value;
			if(h_el.dom.value != img.height)
				h_el.dom.value = img.height;
			if(w_el.dom.value != img.width)
				w_el.dom.value = img.width;
		}
		recalc.defer(500)
	}
	
})

border_el.on("keyup", function(event, el){
	var img = selectedImg;
	if(img){
		handleUpDown(event, el);
		function recalc(){
			img.border = border_el.dom.value||0;
			if(border_el.dom.value != img.border)
				border_el.dom.value = img.border;
		}
		recalc.defer(500)
	}
});

padding_el.on("keyup", function(event, el){
	var img = selectedImg;
	if(img){
		function recalc(){
			var margins = padding_el.dom.value.match(/[0-9]+/g);	//		split(" ");
			if(!margins)
				margins = [0];
			var extel = Ext.fly(img);			
			if(margins.length==2)
				extel.setStyle("margin", margins[0]+"px "+margins[1]+"px");
			else if(margins.length==4)
				extel.setStyle("margin", margins[0]+"px "+margins[1]+"px " + margins[2]+"px "+margins[3]+"px");
			else if(margins.length>=1)
				extel.setStyle("margin", (margins[0]||0)+"px");
			
		}
		recalc.defer(500)
	}
});

title_el.on("keyup", function(event, el){
	var img = selectedImg;
	if(img){
		function recalc(){
			img.title = title_el.dom.value;
		}
		recalc.defer(500)
	}
});


alt_el.on("keyup", function(event, el){
	var img = selectedImg;
	if(img){
		function recalc(){
			img.alt = alt_el.dom.value || img.src.split("/").pop();
			if(alt_el.dom.value != img.alt)
				alt_el.dom.value = img.alt;
		}
		recalc.defer(500)
	}
});
